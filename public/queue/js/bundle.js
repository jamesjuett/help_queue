!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){var s=n(4).Symbol;e.exports=s},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var s=n(0),i=n(25),o=n(26),a="[object Null]",r="[object Undefined]",u=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?r:a:u&&u in Object(e)?i(e):o(e)}},function(e,t,n){var s=n(23),i="object"==typeof self&&self&&self.Object===Object&&self,o=s||i||Function("return this")();e.exports=o},function(e,t){e.exports=function(e,t){for(var n=-1,s=null==e?0:e.length,i=Array(s);++n<s;)i[n]=t(e[n],n,e);return i}},function(e,t,n){var s=n(7);e.exports=function(e){return null==e?"":s(e)}},function(e,t,n){var s=n(0),i=n(5),o=n(44),a=n(8),r=1/0,u=s?s.prototype:void 0,p=u?u.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(a(t))return p?p.call(t):"";var n=t+"";return"0"==n&&1/t==-r?"-0":n}},function(e,t,n){var s=n(3),i=n(45),o="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||i(e)&&s(e)==o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n(10);function i(e){var t=e.getBasicProfile();s.User.signIn(t.getEmail(),e.getAuthResponse().id_token)}$(document).ready(function(){s.QueueApplication.createInstance($("#queueApplication")),function(){var e=$("#clearInput"),t=$("#clearTheQueueDialog");t.on("shown.bs.modal",function(){e.focus()}),t.on("show.bs.modal",function(){e.val("")}),e.on("input",function(e){if("clear"==$(this).val()){t.modal("hide");var n=s.QueueApplication.instance.activeQueue();n&&n.clear()}});var n=$("#signUpDialog");n.on("show.bs.modal",function(){$(this).find("input").val("")}),n.on("shown.bs.modal",function(){$(this).find("input:first").focus()});var i=$("#sendMessageDialog");i.on("show.bs.modal",function(){$(this).find("input").val("")}),i.on("shown.bs.modal",function(){$(this).find("input:first").focus()}),$("#sendMessageForm").submit(function(e){e.preventDefault();var t=$("#sendMessageContent").val();return t&&0!=t.length?(s.QueueApplication.instance.sendMessage(t),i.modal("hide"),!1):(alert("You can't send a blank message."),!1)});var o=$("#addAnnouncementDialog");o.on("show.bs.modal",function(){$(this).find("textarea").val("")}),o.on("shown.bs.modal",function(){$(this).find("textarea").focus()}),$("#addAnnouncementForm").submit(function(e){e.preventDefault();var t=$("#addAnnouncementContent").val();if(!t||0==t.length)return alert("You can't post a blank announcement."),!1;var n=s.QueueApplication.instance.activeQueue();return n&&n.addAnnouncement(t),o.modal("hide"),!1}),new s.Schedule($("#schedulePicker")),new s.ManageQueueDialog}(),gapi.signin2.render("googleSignInButton",{scope:"profile email",width:240,height:50,longtitle:!0,theme:"dark",onsuccess:i})}),console.log("TEST BLAH")},function(e,t,n){"use strict";var s,i=this&&this.__extends||(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,s){var i,o=arguments.length,a=o<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,s);else for(var r=e.length-1;r>=0;r--)(i=e[r])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},a=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))(function(i,o){function a(e){try{u(s.next(e))}catch(e){o(e)}}function r(e){try{u(s.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,r)}u((s=s.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){var n,s,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(o){return function(r){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,s&&(i=2&o[0]?s.return:o[0]?s.throw||((i=s.return)&&i.call(s),0):s.next)&&!(i=i.call(s,o[1])).done)return i;switch(s=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,s=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],s=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,r])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});Array.prototype.clear=function(){this.length=0};var p=n(11),c=u(n(41)),l=u(n(46)),d=function(){function e(e){this.courses=[],this.messagesShown={},this.observable=new p.Observable(this),this.elem=e,this.coursePills=e.find(".coursePills"),this.coursePanes=e.find(".coursePanes"),this.loadCourses()}return e.createInstance=function(t){e.instance=new e(t)},e.prototype.loadCourses=function(){return a(this,void 0,void 0,function(){var e,t;return r(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,$.getJSON("api/courseList")];case 1:return e=n.sent(),this.onCoursesLoad(e),[3,3];case 2:return x(t=n.sent(),t),[3,3];case 3:return[2]}})})},e.prototype.onCoursesLoad=function(e){var t=this;this.coursePills.empty(),this.coursePanes.empty(),this.courses.clear(),this.coursePanes.append($('<div class="tab-pane fade in active"><h1><span class="glyphicon glyphicon-arrow-left"></span> Please select a course.</h1></div>')),e.forEach(function(e){for(var n in e)e[n]=c.default(e[n]);var s=e.courseId,i=$('<li><a href="#'+s+'" data-toggle="pill"><h3>'+s+"</h3></a></li>");t.coursePills.append(i);var o=$('<div id="'+s+'" class="tab-pane fade"></div>');t.coursePanes.append(o);var a=new h(e,o);t.courses.push(a),i.find("a").click(function(){a.makeActive()})})},e.prototype.setActiveQueue=function(e){this._activeQueue=e,console.log("Setting active queue to "+e.queueId),this.updateSignUpForm(),this.observable.send("activeQueueSet")},e.prototype.activeQueue=function(){return this._activeQueue},e.prototype.updateSignUpForm=function(){this._activeQueue&&this._activeQueue.hasMap()?($("#signUpMapHolder").show(),$("#signUpMapMessage").show(),$("#signUpMapImage").attr("src",this._activeQueue.mapImageSrc)):($("#signUpMapHolder").hide(),$("#signUpMapMessage").hide())},e.prototype.userSignedIn=function(){this.courses.forEach(function(e){e.userSignedIn()})},e.prototype.refreshActiveQueue=function(){this._activeQueue&&this._activeQueue.refresh(),this.refreshContent()},e.prototype.message=function(e){this.messagesShown[e.id]||(this.messagesShown[e.id]=!0,$("#messageDialogHeader").html("Message"),$("#messageDialogContent").append('<p><span class="label label-info">'+e.sender+"</span> "+e.message+"</p>"),$("#messageDialog").modal("show"))},e.prototype.setSendMessagePostId=function(e){this.sendMessagePostId=e},e.prototype.sendMessage=function(e){$.ajax({type:"POST",url:"api/sendMessage",data:{idtoken:q.idToken(),id:this.sendMessagePostId,message:e},success:function(){},error:x})},e.prototype.refreshContent=function(){this._activeQueue&&(document.title=this._activeQueue.course.shortName+" OH ("+this._activeQueue.numEntries+")")},e.prototype.notify=function(e,t){Notification?"granted"!==Notification.permission?Notification.requestPermission():new Notification(e,{body:t}):alert(t)},e._name="QueueApplication",e}();t.QueueApplication=d;var h=function(){function e(e,t){this.isAdmin=!1,this.queues=[],this.courseId=e.courseId,this.shortName=e.shortName,this.fullName=e.fullName,this.elem=t,this.queuePillsElem=$('<ul class="queuePills nav nav-pills"></ul>'),this.elem.append(this.queuePillsElem),this.pickAQueueElem=$("<div></div>"),this.pickAQueueElem.append($('<h3><span class="glyphicon glyphicon-arrow-up"></span> Several queues are available for '+this.shortName+". Please select one.</h3>")),this.elem.append(this.pickAQueueElem),this.mainElem=$("<div></div>"),this.mainElem.hide(),this.queuePanesElem=$('<div class="col-xs-12 col-md-12 queuePanes tab-content"></div>'),this.mainElem.append(this.queuePanesElem),this.contentElem=$('<div class="col-xs-12 col-md-12"></div>'),this.mainElem.append(this.contentElem),this.elem.append(this.mainElem),this.loadContent(),this.loadQueues()}return e.prototype.makeActive=function(){this.activeQueue&&this.activeQueue.makeActive()},e.prototype.loadContent=function(){this.contentElem.load("queue-component/courseContent/"+this.courseId)},e.prototype.loadQueues=function(){var e=this;return $.ajax({type:"GET",url:"api/queueList/"+this.courseId,dataType:"json",success:function(t){e.onQueuesLoad(t)},error:x})},e.prototype.onQueuesLoad=function(e){var t=this;this.queues.clear(),this.queuePillsElem.empty(),this.queuePanesElem.empty(),e.forEach(function(e){var n=e.name,s=e.queueId,i=$('<li><a data-toggle="pill"><h6>'+n+"</h6></a></li>");i.find("a").prop("href","#queue"+s),t.queuePillsElem.append(i);var o=$('<div id="queue'+s+'"></div>');o.addClass("tab-pane fade"),t.queuePanesElem.append(o);var a=new m(e,t,o);t.queues.push(a),a.refresh(),i.find("a").click(function(){t.pickAQueueElem.empty(),t.activeQueue=a,t.mainElem.show(),a.makeActive()})}),1===this.queues.length?(this.queuePillsElem.children().first().addClass("active"),this.queuePanesElem.children().first().addClass("in active"),this.activeQueue=this.queues[0],this.pickAQueueElem.hide(),this.mainElem.show()):(this.pickAQueueElem.show(),this.mainElem.hide()),this.setAdmin(q.isCourseAdmin(this.courseId))},e.prototype.setAdmin=function(e){this.isAdmin=e;for(var t=0;t<this.queues.length;++t)this.queues[t].setAdmin(e);this.isAdmin?(this.elem.addClass("admin"),this.elem.removeClass("notAdmin")):(this.elem.addClass("notAdmin"),this.elem.removeClass("admin"))},e.prototype.userSignedIn=function(){this.setAdmin(q.isCourseAdmin(this.courseId)),this.queues.forEach(function(e){e.userSignedIn()})},e}(),f=function(){function e(e,t,n){var s,i=this;this.id=e.id,this.content=e.content,this.ts=e.ts,this.queue=t,this.elem=n,this.elem.addClass("panel panel-info").append(s=$('<div class="panel-body bg-info"></div>').append('<span class="glyphicon glyphicon-bullhorn"></span> ').append($("<strong>"+this.content+"</strong>"))),$('<button type="button" class="close">&times;</button>').appendTo(s).click(function(e){confirm("Are you sure you want to remove this announcement?\n\n"+i.content)&&i.remove()})}return e.prototype.remove=function(){var e=this;$.ajax({type:"DELETE",url:"api/announcements/"+this.id,success:function(){e.queue.refresh()},error:x})},e}(),m=function(){function e(e,t,n){this.observable=new p.Observable(this),this.isAdmin=!1,this.numEntries=0,this.lastRefresh=new Date,this.isOpen=!1,this.myRequest=null,this.mapImageSrc="",this.refreshDisabled=!1,this.currentRefreshIndex=0,this.course=t,this.queueId=e.queueId,this.location=e.location,this.mapImageSrc=e.map?e.map:"",this.name=e.name,this.elem=n,this.isAdmin=!1,this.numEntries=0,this.currentRefreshIndex=0,this.lastRefresh=new Date,this.isOpen=!1,this.refreshDisabled=!1,this.announcementContainerElem=$("<div></div>").appendTo(this.elem);var s=$("<p></p>").appendTo(this.elem);s.append($('<span data-toggle="tooltip" title="Number of Students"><span class="glyphicon glyphicon-education"></span></span>').append(" ").append(this.numEntriesElem=$("<span></span>"))),s.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"),s.append($('<span data-toggle="tooltip" title="Last Refresh"><span class="glyphicon glyphicon-refresh"></span></span>').append(" ").append(this.lastRefreshElem=$("<span></span>"))),s.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"),this.statusMessageElem=$("<span>Loading queue information...</span>"),s.append(this.statusMessageElem),this.adminStatusElem=$('<span class="adminOnly"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You are an admin for this queue.</b></span>'),s.append(this.adminStatusElem),this.adminControlsElem=$('<div class="panel panel-default adminOnly"><div class="panel-body"></div></div>').appendTo(this.elem).find(".panel-body"),this.adminControls=new g(this,this.adminControlsElem),this.studentControlsElem=$('<div class="panel panel-default"><div class="panel-body"></div></div>').appendTo(this.elem).find(".panel-body"),this.studentControls=new v(this,this.studentControlsElem),this.observable.addListener(this.studentControls),this.queueElem=$("<div></div>").appendTo(this.elem),this.stackElem=$('<div class="adminOnly"></div>').appendTo(this.elem),this.elem.find('[data-toggle="tooltip"]').tooltip(),this.userSignedIn()}return e.prototype.makeActiveOnClick=function(e){var t=this;e.click(function(){t.makeActive()})},e.prototype.makeActive=function(){d.instance.setActiveQueue(this),this.refresh()},e.prototype.refresh=function(){var e=this;this.currentRefreshIndex+=1;var t=this.currentRefreshIndex;return $.ajax({type:"POST",url:"api/list",data:{queueId:this.queueId},dataType:"json",success:function(n){t===e.currentRefreshIndex&&e.refreshResponse(n)},error:x})},e.prototype.refreshResponse=function(e){var t=this;if(!this.refreshDisabled){e.message&&d.instance.message(e.message),this.announcementContainerElem.empty();var n=e.announcements;if(n.forEach(function(e){var n=$("<div></div>").appendTo(t.announcementContainerElem);new f(e,t,n)}),n.length>0?this.announcementContainerElem.show():this.announcementContainerElem.hide(),this.isOpen=e.isOpen,this.isOpen)this.statusMessageElem.html("The queue is open.");else{for(var s=e.schedule,i=-1,o=e.halfHour;o<48;++o){var a=s.charAt(o);if("o"===a||"p"===a){i=o;break}}if(-1===i)this.statusMessageElem.html("The queue is closed for today.");else{var r=new Date;r.setHours(0),r.setMinutes(0),r.setSeconds(0);var u=new Date(r.getTime()+30*i*6e4);this.statusMessageElem.html("The queue is closed right now. It will open at "+u.toLocaleTimeString()+".")}}var p=e.queue;this.queueElem.empty();var c=[],l=null;for(o=0;o<p.length;++o){var h=p[o],m=$("<li class='list-group-item'></li>"),v=new y(this,h,o,m);c.push(v),!l&&q.isMe(v.email)&&(l=v),this.queueElem.append(m)}this.setMyRequest(l),this.observable.send("queueRefreshed"),this.stackElem.html("<h3>The Stack</h3><br /><p>Most recently removed at top</p><pre>"+JSON.stringify(e.stack,null,4)+"</pre>");var g=this.numEntries;this.numEntries=p.length,this.isAdmin&&0===g&&this.numEntries>0&&d.instance.notify("Request Received!",c[0].name),this.lastRefresh=new Date,this.numEntriesElem.html(""+this.numEntries),this.lastRefreshElem.html(this.lastRefresh.toLocaleTimeString())}},e.prototype.setMyRequest=function(e){this.myRequest=e,this.observable.send("myRequestSet")},e.prototype.removeRequest=function(e){console.log("attempting to remove "+e.email+" from queue "+this.queueId),this.disableRefresh();var t=this;$.ajax({type:"POST",url:"api/remove",data:{id:e.id},success:function(){console.log("successfully removed "+e.email+" from queue "+t.queueId),e.onRemove()},error:x}).always(function(){setTimeout(function(){t.enableRefresh(),t.refresh()},500)})},e.prototype.cancelIncomingRefresh=function(){this.currentRefreshIndex+=1},e.prototype.disableRefresh=function(){this.refreshDisabled=!0},e.prototype.enableRefresh=function(){this.refreshDisabled=!1},e.prototype.clear=function(){var e=this;return $.ajax({type:"POST",url:"api/clear",data:{idtoken:q.idToken(),queueId:this.queueId},success:function(){e.clearList()},error:x})},e.prototype.clearList=function(){this.queueElem.children().slideUp()},e.prototype.signUp=function(e,t,n,s,i){var o=this;return $.ajax({type:"POST",url:"api/signUp",data:{idtoken:q.idToken(),queueId:this.queueId,name:e,location:t,mapX:s,mapY:i,description:n},dataType:"json",success:function(e){e.fail?T(e.reason):o.refresh()},error:x})},e.prototype.updateRequest=function(e,t,n,s,i){var o=this;return $.ajax({type:"POST",url:"api/updateRequest",data:{id:this.myRequest.id,name:e,location:t,mapX:s,mapY:i,description:n},dataType:"json",success:function(e){e.fail?T(e.reason):o.refresh()},error:x})},e.prototype.setAdmin=function(e){var t=this.isAdmin;this.isAdmin=e,t!=this.isAdmin&&this.refresh()},e.prototype.userSignedIn=function(){this.observable.send("userSignedIn")},e.prototype.hasMap=function(){return""!==this.mapImageSrc},e.prototype.updateGroups=function(e){e.append("queueId",this.queueId),$.ajax({type:"POST",url:"api/updateGroups",cache:!1,contentType:!1,processData:!1,data:e,dataType:"json",success:function(e){e.success?alert("groups uploaded successfully"):alert("error uploading groups. roster and groups have been cleared - you'll have to upload them again, sorry!")},error:function(e){alert("error uploading groups")}})},e.prototype.updateConfiguration=function(e){return e.queueId=this.queueId,$.ajax({type:"POST",url:"api/updateQueueConfiguration",data:e,dataType:"json",success:function(e){e.fail&&T(e.reason)},error:x})},e.prototype.addAnnouncement=function(e){var t=this;return $.ajax({type:"POST",url:"api/announcements",data:{queueId:this.queueId,content:e},success:function(){t.refresh()},error:x})},e}(),v=function(){function e(t,n){var s=this;this.queue=t,this.elem=n,this.formHasChanges=!1;var i,o=$("<div></div>");if(this.signUpForm=$('<form id="signUpForm" role="form" class="form-horizontal"></form>').append(i=$("<div></div>").append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpName'+t.queueId+'">Name:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpNameInput=$('<input type="text" class="form-control" id="signUpName'+t.queueId+'" required="required" maxlength="30" placeholder="Nice to meet you!">')))).append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpDescription'+t.queueId+'">Description:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpDescriptionInput=$('<input type="text" class="form-control" id="signUpDescription'+t.queueId+'"required="required" maxlength="100" placeholder="e.g. Segfault in function X, using the map data structure, etc.">')))).append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpLocation'+t.queueId+'">Location:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpLocationInput=$('<input type="text" class="form-control" id="signUpLocation'+t.queueId+'"required="required" maxlength="30" placeholder="e.g. Computer #36, laptop by glass/atrium door, etc.">')))).append('<div class="hidden-xs form-group"><div class="col-sm-offset-3 col-sm-9"><button type="submit" class="btn btn-success queue-signUpButton">Sign Up</button> <button type="submit" class="btn btn-success queue-updateRequestButton" style="display:none;"></button></div></div>')),o.append(this.signUpForm),this.statusElem=$("<div></div>"),o.append(this.statusElem),this.signUpForm.find("input").on("input",function(){s.formChanged()}),this.queue.hasMap()){i.addClass("col-xs-12 col-sm-8"),i.css("padding","0"),this.signUpForm.append(this.mapHolder=$('<div class="col-xs-12 col-sm-4" style="position: relative; padding:0"></div>').append(this.signUpMap=$('<img src="img/'+this.queue.mapImageSrc+'" class="queue-signUpMap" style="width:100%"></img>')).append(this.signUpPin=$('<span class="queue-locatePin"><span class="glyphicon glyphicon-map-marker" style="position:absolute; left:-1.3ch;top:-0.95em;"></span></span>'))),this.signUpForm.append($('<div class="visible-xs col-xs-12" style="padding: 0;"><div class="form-group"><div class="col-sm-offset-3 col-sm-9"><button type="submit" class="btn btn-success queue-signUpButton">Sign Up</button> <button type="submit" class="btn btn-success queue-updateRequestButton" style="display:none;"></button></div></div></div>'));var a=this.signUpPin;this.mapX=50,this.mapY=50;var r=this;this.signUpMap.click(function(e){r.mapX=100*Math.trunc(e.pageX-$(this).offset().left)/$(this).width(),r.mapY=100*Math.trunc(e.pageY-$(this).offset().top)/$(this).height(),a.css("left",r.mapX+"%"),a.css("top",r.mapY+"%"),r.formChanged()}),this.signUpLocationInput.val("Click on the map!"),this.signUpLocationInput.prop("disabled",!0)}this.signUpForm.submit(function(t){t.preventDefault();var n=s.signUpNameInput.val(),i=s.signUpDescriptionInput.val(),o=s.signUpLocationInput.val();return n&&0!=n.length&&o&&0!=o.length&&i&&0!=i.length?(s.queue.myRequest?s.queue.updateRequest(n,o,i,s.mapX,s.mapY):s.queue.signUp(n,o,i,s.mapX,s.mapY),s.formHasChanges=!1,s.updateRequestButtons.removeClass("btn-warning"),s.updateRequestButtons.addClass("btn-success"),s.updateRequestButtons.prop("disabled",!0),s.updateRequestButtons.html(e.UPDATE_REQUEST_BUTTON_UP_TO_DATE),!1):(T("You must fill in all the fields."),!1)}),this.signUpButtons=this.signUpForm.find("button.queue-signUpButton"),this.updateRequestButtons=this.signUpForm.find("button.queue-updateRequestButton").prop("disabled",!0).html(e.UPDATE_REQUEST_BUTTON_UP_TO_DATE),this.elem.append(o)}return e.prototype.formChanged=function(){this.queue.myRequest&&(this.formHasChanges=!0,this.updateRequestButtons.removeClass("btn-success"),this.updateRequestButtons.addClass("btn-warning"),this.updateRequestButtons.prop("disabled",!1),this.updateRequestButtons.html(e.UPDATE_REQUEST_BUTTON_UPDATE))},e.prototype.refreshSignInEnabled=function(){var e=q.isUmich()&&this.queue.isOpen&&!this.queue.myRequest;this.signUpButtons.prop("disabled",!e),this.queue.myRequest&&this.updateRequestButtons.show()},e.prototype.queueRefreshed=function(){this.refreshSignInEnabled()},e.prototype.userSignedIn=function(){this.refreshSignInEnabled()},e.prototype.myRequestSet=function(){var e=this.queue.myRequest;this.statusElem.html(""),e&&(this.formHasChanges||(this.signUpNameInput.val(e.name),this.signUpDescriptionInput.val(e.description||""),this.signUpLocationInput.val(e.location||""),this.queue.hasMap()&&(this.mapX=e.mapX,this.mapY=e.mapY,this.signUpPin.css("left",this.mapX+"%"),this.signUpPin.css("top",this.mapY+"%"))),this.statusElem.html("You are at position "+e.index+" in the queue."),e.tag&&this.statusElem.prepend('<span class="label label-info">'+e.tag+"</span> "))},e._name="StudentControls",e.UPDATE_REQUEST_BUTTON_UP_TO_DATE="<span class='glyphicon glyphicon-ok'></span> Request Updated",e.UPDATE_REQUEST_BUTTON_UPDATE="Update Request",o([p.messageResponse()],e.prototype,"queueRefreshed",null),o([p.messageResponse()],e.prototype,"userSignedIn",null),o([p.messageResponse()],e.prototype,"myRequestSet",null),e}(),g=function(){function e(e,t){this.queue=e,this.elem=t,this.elem.append("<p><b>Admin Controls</b></p>");var n=$('<button type="button" class="btn btn-danger adminOnly" data-toggle="modal" data-target="#clearTheQueueDialog">Clear the queue</button>');this.queue.makeActiveOnClick(n),this.elem.append(n),this.elem.append(" ");var s=$('<button type="button" class="btn btn-info adminOnly" data-toggle="modal" data-target="#scheduleDialog">Schedule</button>');this.queue.makeActiveOnClick(s),this.elem.append(s),this.elem.append(" ");var i=$('<button type="button" class="btn btn-info adminOnly" data-toggle="modal" data-target="#manageQueueDialog">Manage Queue</button>');this.queue.makeActiveOnClick(i),this.elem.append(i),this.elem.append(" ");var o=$('<button type="button" class="btn btn-info adminOnly" data-toggle="modal" data-target="#addAnnouncementDialog">Add Announcement</button>');this.queue.makeActiveOnClick(o),this.elem.append(o)}return e._name="AdminControls",e}(),y=function(){function e(e,t,n,s){this.queue=e,this.id=t.id,this.email=t.email,this.index=n,this.isMe=!!t.name,this.elem=s;var i=$('<div class="queue-entryInfo"></div>'),o=t.name?t.name+" ("+t.email+")":"Anonymous Student";this.nameElem=$('<p><span class="glyphicon glyphicon-education"></span></p>').append(" "+o).appendTo(i),t.tag&&t.tag.length>0&&(this.tag=t.tag,this.nameElem.append(' <span class="label label-info">'+this.tag+"</span>")),this.name=t.name,t.location&&t.location.length>0&&(this.locationElem=$('<p><span class="glyphicon glyphicon-map-marker"></span></p>').append(" "+t.location).appendTo(i),this.location=t.location),t.description&&t.description.length>0&&(this.descriptionElem=$('<p><span class="glyphicon glyphicon-question-sign"></span></p>').append(" "+t.description).appendTo(i),this.description=t.description);var a=Date.now()-new Date(1e3*parseInt(t.ts)).getTime(),r=Math.round(a/1e3/60);this.tsElem=$('<p><span class="glyphicon glyphicon-time"></span></p>').append(" "+r+" min").appendTo(i);var u=$('<button type="button" class="btn btn-danger">Remove</button>');this.isMe||u.addClass("adminOnly"),u.on("click",this.queue.removeRequest.bind(this.queue,this)),i.append(u),i.append(" ");var p=$('<button type="button" class="btn btn-warning adminOnly">Message</button>'),c=this;if(p.on("click",function(){$("#sendMessageDialog").modal("show"),d.instance.setSendMessagePostId(c.id)}),i.append(p),this.queue.hasMap()&&void 0!==t.mapX&&void 0!==t.mapY){var l=this.mapX=parseFloat(t.mapX),h=this.mapY=parseFloat(t.mapY),f=$('<div class="adminOnly" style="display:inline-block; vertical-align: top; width: 25%; margin-right: 10px"></div>');this.elem.append(f);var m=$('<div style="position: relative"></div>');this.mapElem=$('<img class="adminOnly queue-entryMap" src="img/'+this.queue.mapImageSrc+'"></img>'),m.append(this.mapElem),this.mapPin=$('<span class="adminOnly queue-locatePin"><span class="glyphicon glyphicon-map-marker" style="position:absolute; left:-1.3ch;top:-0.95em;"></span></span>'),this.mapPin.css("left",l+"%"),this.mapPin.css("top",h+"%"),m.append(this.mapPin),f.append(m)}this.elem.append(i)}return e.prototype.onRemove=function(){this.elem.slideUp(500,function(){$(this).remove()})},e._name="QueueEntry",e}(),b=function(){function e(t){var n=this,s=$("#scheduleDialog");$("#scheduleForm").submit(function(e){return e.preventDefault(),n.update(),s.modal("hide"),!1}),s.on("shown.bs.modal",function(){n.refresh()});var i=$("#schedulePicker"),o=$("<tr></tr>").appendTo(i);o.append('<td style="width:1em; padding-right: 3px;"></td>');for(var a=0;a<24;++a)o.append('<td colspan="2">'+(0===a||12===a?12:a%12)+"</td>");this.unitElems=[];for(var r=["S","M","T","W","T","F","S"],u=0;u<7;++u){var p=[],c=$("<tr></tr>");c.append('<td style="width:1em; text-align: right; padding-right: 3px;">'+r[u]+"</td>");for(var l=0;l<48;++l){var d=$('<td><div class="scheduleUnit"></div></td>').appendTo(c).find(".scheduleUnit");p.push(d)}this.unitElems.push(p),i.append(c)}var h=!1;i.on("mousedown",function(e){return e.preventDefault(),h=!0,!1}),i.on("mouseup",function(){h=!1}),i.on("mouseleave",function(){h=!1}),s.on("hidden.bs.modal",function(){h=!1});var f=function(t){if(h){var n=t.data("scheduleType");t.removeClass("scheduleUnit-"+n);var s=e.sequence[n];t.data("scheduleType",s),t.addClass("scheduleUnit-"+s)}};i.on("mouseover",".scheduleUnit",function(e){return e.preventDefault(),f($(this)),!1}),i.on("mousedown",".scheduleUnit",function(e){return e.preventDefault(),h=!0,f($(this)),!1})}return e.prototype.refresh=function(){var e=this,t=d.instance.activeQueue();if(t)return $.ajax({type:"GET",url:"api/schedule/"+t.queueId,dataType:"json",success:function(t){for(var n=t,s=0;s<7;++s)for(var i=0;i<48;++i){var o=e.unitElems[s][i];o.removeClass(),o.addClass("scheduleUnit"),o.addClass("scheduleUnit-"+n[s].charAt(i)),o.data("scheduleType",n[s].charAt(i))}},error:x})},e.prototype.update=function(){if(d.instance.activeQueue()){for(var e=[],t=0;t<7;++t)e.push(this.unitElems[t].map(function(e){return e.data("scheduleType")}).join(""));var n=d.instance.activeQueue();return n?$.ajax({type:"POST",url:"api/updateSchedule",data:{idtoken:q.idToken(),queueId:n.queueId,schedule:e},success:function(){console.log("schedule updated")},error:x}):void 0}},e.sequence={o:"c",c:"p",p:"o"},e}();t.Schedule=b;var q,E=function(){function e(){var e=this,t=($("#manageQueueDialog"),$("#groupsForm"));t.submit(function(e){e.preventDefault();var n=new FormData(t[0]),s=d.instance.activeQueue();return s&&s.updateGroups(n),!1}),$("#policiesForm").submit(function(t){return t.preventDefault(),e.update(),!1}),this.updateConfigurationButton=$("#updateConfigurationButton"),$("#preventUnregisteredCheckbox").change(this.unsavedChanges.bind(this)),$("#preventGroupsCheckbox").change(this.unsavedChanges.bind(this)),$("#prioritizeNewCheckbox").change(this.unsavedChanges.bind(this)),d.instance.observable.addListener(this),this.refresh()}return e.prototype.refresh=function(){var e=d.instance.activeQueue();if(e&&e.isAdmin)return $("#checkQueueRosterLink").attr("href","api/roster/"+e.queueId),$("#checkQueueGroupsLink").attr("href","api/groups/"+e.queueId),$.ajax({type:"GET",url:"api/queueConfiguration/"+e.queueId,dataType:"json",success:this.refreshResponse.bind(this),error:x})},e.prototype.refreshResponse=function(e){console.log(JSON.stringify(e)),$("#preventUnregisteredCheckbox").prop("checked","y"===e.preventUnregistered),$("#preventGroupsCheckbox").prop("checked","y"===e.preventGroups),$("#prioritizeNewCheckbox").prop("checked","y"===e.prioritizeNew),this.changesUpToDate()},e.prototype.update=function(){var e=d.instance.activeQueue();e&&e.updateConfiguration({preventUnregistered:$("#preventUnregisteredCheckbox").is(":checked")?"y":"n",preventGroups:$("#preventGroupsCheckbox").is(":checked")?"y":"n",prioritizeNew:$("#prioritizeNewCheckbox").is(":checked")?"y":"n"}).done(this.changesUpToDate.bind(this))},e.prototype.unsavedChanges=function(){this.updateConfigurationButton.html(e.POLICIES_UNSAVED).prop("disabled",!1).removeClass("btn-success").addClass("btn-warning")},e.prototype.changesUpToDate=function(){this.updateConfigurationButton.html(e.POLICIES_UP_TO_DATE).prop("disabled",!0).removeClass("btn-warning").addClass("btn-success")},e.POLICIES_UP_TO_DATE='<span><span class="glyphicon glyphicon-floppy-saved"></span> Saved</span>',e.POLICIES_UNSAVED='<span><span class="glyphicon glyphicon-floppy-open"></span> Update Configuration</span>',o([p.messageResponse("activeQueueSet")],e.prototype,"refresh",null),e}();if(t.ManageQueueDialog=E,function(e){e.signIn=function(t,s){var i=new n(t,s),o=$("#accountMessage");i.isUmich()||(o.show(),o.html("Hi "+i.email+"! Please <a>sign out</a> and switch to an @umich.edu account to use the queue."),o.find("a").click(function(){gapi.auth2.getAuthInstance().disconnect().then(function(){e.signOut(),o.hide()})}),$(".openSignUpDialogButton").prop("disabled",!0))},e.signOut=function(){$("#accountMessage").hide(),o&&o.onSignOut(),new s},e.idToken=function(){return o.idToken()},e.isUmich=function(){return o.isUmich()},e.isCourseAdmin=function(e){return o.isCourseAdmin(e)},e.isMe=function(e){return o.isMe(e)};var t=function(){function e(){}return e.prototype.onSignOut=function(){},e.prototype.onFinishSigningIn=function(){o=this,d.instance&&d.instance.userSignedIn()},e._name="UserBase",e}(),n=function(e){function t(t,n){var s=e.call(this)||this;return s.admins={},s.email=t,s._idToken=n,$.ajax({type:"POST",url:"api/login",data:{idtoken:s.idToken()},success:function(e){s.checkAdmin()},error:x}),s}return i(t,e),t.prototype.isUmich=function(){return l.default(this.email,"@umich.edu")},t.prototype.isMe=function(e){return this.email===e},t.prototype.idToken=function(){return this._idToken},t.prototype.checkAdmin=function(){var e=this;$.ajax({type:"POST",url:"api/adminCourses",data:{idtoken:this.idToken()},dataType:"json",success:function(t){for(var n=0;n<t.length;++n)e.admins[t[n].courseId]=!0;t.length>0?(setInterval(function(){d.instance.refreshActiveQueue()},5e3),Notification&&Notification.requestPermission()):setInterval(function(){d.instance.refreshActiveQueue()},6e4),e.onFinishSigningIn()},error:x})},t.prototype.isCourseAdmin=function(e){return this.admins[e]},t}(t),s=function(e){function t(){var t=e.call(this)||this;return t.onFinishSigningIn(),setInterval(function(){d.instance.refreshActiveQueue()},6e4),t}return i(t,e),t.prototype.isUmich=function(){return!1},t.prototype.idToken=function(){return""},t.prototype.isCourseAdmin=function(e){return!1},t.prototype.isMe=function(e){return!1},t}(t),o=new s}(q=t.User||(t.User={})),"object"==typeof sessionStorage)try{sessionStorage.setItem("localStorage","1"),sessionStorage.removeItem("localStorage")}catch(e){x(null,"It looks like local storage is disabled in your browser. This may aggravate an issue with Google sign-in on Safari or iOS while using private browsing mode.")}function x(e,t){"abort"!==t&&(console.log("Oops. An error occurred. Try refreshing the page."),$("#oopsDialog").modal("show"))}function T(e){console.log(e),$("#errorMessage").html(e),$("#errorDialog").modal("show")}},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(12));function o(e,t){var n=e._act[t.category];n?n.call(e,t):e._act._default?e._act._default.call(e,t):assert(!1)}t.addListener=function(e,t,n){e.observable.addListener(t,n)},t.messageResponse=function(e){return function(t,n,s){t._act||(t._act={}),t._act[e||n]=t[n]}};var a=function(){function e(e){this.silent=!1,this.universalObservers=[],this.observers={},this.source=e}return e.prototype.send=function(e,t){if(!this.silent){var n={category:e,data:t,source:this.source},s=this.observers[n.category];if(s)for(var i=0;i<s.length;++i)o(s[i],n);for(i=0;i<this.universalObservers.length;++i)o(this.universalObservers[i],n)}},e.prototype.addListener=function(e,t){if(t)if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addListener(e,t[n]);else this.observers[t]||(this.observers[t]=[]),this.observers[t].push(e),this.listenerAdded(e,t);else this.universalObservers.push(e),this.listenerAdded(e);return this},e.prototype.removeListener=function(e,t){if(t){var n=this.observers[t];n&&i.default(n,e),this.listenerRemoved(e,t)}else{for(var s in this.observers)this.removeListener(e,s);i.default(this.universalObservers,e),this.listenerRemoved(e)}return this},e.prototype.listenerAdded=function(e,t){},e.prototype.listenerRemoved=function(e,t){},e}();t.Observable=a},function(e,t,n){var s=n(13)(n(32));e.exports=s},function(e,t,n){var s=n(2),i=n(14),o=n(16);e.exports=function(e,t){return o(i(e,t,s),e+"")}},function(e,t,n){var s=n(15),i=Math.max;e.exports=function(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var o=arguments,a=-1,r=i(o.length-t,0),u=Array(r);++a<r;)u[a]=o[t+a];a=-1;for(var p=Array(t+1);++a<t;)p[a]=o[a];return p[t]=n(u),s(e,this,p)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var s=n(17),i=n(31)(s);e.exports=i},function(e,t,n){var s=n(18),i=n(19),o=n(2),a=i?function(e,t){return i(e,"toString",{configurable:!0,enumerable:!1,value:s(t),writable:!0})}:o;e.exports=a},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var s=n(20),i=function(){try{var e=s(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,t,n){var s=n(21),i=n(30);e.exports=function(e,t){var n=i(e,t);return s(n)?n:void 0}},function(e,t,n){var s=n(22),i=n(27),o=n(1),a=n(29),r=/^\[object .+?Constructor\]$/,u=Function.prototype,p=Object.prototype,c=u.toString,l=p.hasOwnProperty,d=RegExp("^"+c.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(s(e)?d:r).test(a(e))}},function(e,t,n){var s=n(3),i=n(1),o="[object AsyncFunction]",a="[object Function]",r="[object GeneratorFunction]",u="[object Proxy]";e.exports=function(e){if(!i(e))return!1;var t=s(e);return t==a||t==r||t==o||t==u}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(24))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var s=n(0),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,r=s?s.toStringTag:void 0;e.exports=function(e){var t=o.call(e,r),n=e[r];try{e[r]=void 0;var s=!0}catch(e){}var i=a.call(e);return s&&(t?e[r]=n:delete e[r]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var s,i=n(28),o=(s=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!o&&o in e}},function(e,t,n){var s=n(4)["__core-js_shared__"];e.exports=s},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){var n=800,s=16,i=Date.now;e.exports=function(e){var t=0,o=0;return function(){var a=i(),r=s-(a-o);if(o=a,r>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var s=n(33);e.exports=function(e,t){return e&&e.length&&t&&t.length?s(e,t):e}},function(e,t,n){var s=n(5),i=n(34),o=n(38),a=n(39),r=n(40),u=Array.prototype.splice;e.exports=function(e,t,n,p){var c=p?o:i,l=-1,d=t.length,h=e;for(e===t&&(t=r(t)),n&&(h=s(e,a(n)));++l<d;)for(var f=0,m=t[l],v=n?n(m):m;(f=c(h,v,f,p))>-1;)h!==e&&u.call(h,f,1),u.call(e,f,1);return e}},function(e,t,n){var s=n(35),i=n(36),o=n(37);e.exports=function(e,t,n){return t==t?o(e,t,n):s(e,i,n)}},function(e,t){e.exports=function(e,t,n,s){for(var i=e.length,o=n+(s?1:-1);s?o--:++o<i;)if(t(e[o],o,e))return o;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var s=n-1,i=e.length;++s<i;)if(e[s]===t)return s;return-1}},function(e,t){e.exports=function(e,t,n,s){for(var i=n-1,o=e.length;++i<o;)if(s(e[i],t))return i;return-1}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t){e.exports=function(e,t){var n=-1,s=e.length;for(t||(t=Array(s));++n<s;)t[n]=e[n];return t}},function(e,t,n){var s=n(42),i=n(6),o=/[&<>"']/g,a=RegExp(o.source);e.exports=function(e){return(e=i(e))&&a.test(e)?e.replace(o,s):e}},function(e,t,n){var s=n(43)({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});e.exports=s},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var s=n(47),i=n(7),o=n(48),a=n(6);e.exports=function(e,t,n){e=a(e),t=i(t);var r=e.length,u=n=void 0===n?r:s(o(n),0,r);return(n-=t.length)>=0&&e.slice(n,u)==t}},function(e,t){e.exports=function(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}},function(e,t,n){var s=n(49);e.exports=function(e){var t=s(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t,n){var s=n(50),i=1/0,o=1.7976931348623157e308;e.exports=function(e){return e?(e=s(e))===i||e===-i?(e<0?-1:1)*o:e==e?e:0:0===e?e:0}},function(e,t,n){var s=n(1),i=n(8),o=NaN,a=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,p=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(i(e))return o;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=u.test(e);return n||p.test(e)?c(e.slice(2),n?2:8):r.test(e)?o:+e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,