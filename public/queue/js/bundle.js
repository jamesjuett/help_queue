!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=50)}([function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var s=n(6).Symbol;e.exports=s},function(e,t,n){var s=n(7),i=n(14),o="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||i(e)&&s(e)==o}},function(e,t,n){var s=n(1),i=n(5),o=n(15),a=n(2),r=1/0,u=s?s.prototype:void 0,p=u?u.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(a(t))return p?p.call(t):"";var n=t+"";return"0"==n&&1/t==-r?"-0":n}},function(e,t,n){var s=n(3);e.exports=function(e){return null==e?"":s(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,s=null==e?0:e.length,i=Array(s);++n<s;)i[n]=t(e[n],n,e);return i}},function(e,t,n){var s=n(36),i="object"==typeof self&&self&&self.Object===Object&&self,o=s||i||Function("return this")();e.exports=o},function(e,t,n){var s=n(1),i=n(34),o=n(33),a="[object Null]",r="[object Undefined]",u=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?r:a:u&&u in Object(e)?i(e):o(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var s=n(0),i=n(2),o=NaN,a=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,p=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(i(e))return o;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=u.test(e);return n||p.test(e)?c(e.slice(2),n?2:8):r.test(e)?o:+e}},function(e,t,n){var s=n(9),i=1/0,o=1.7976931348623157e308;e.exports=function(e){return e?(e=s(e))===i||e===-i?(e<0?-1:1)*o:e==e?e:0:0===e?e:0}},function(e,t,n){var s=n(10);e.exports=function(e){var t=s(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t){e.exports=function(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}},function(e,t,n){var s=n(12),i=n(3),o=n(11),a=n(4);e.exports=function(e,t,n){e=a(e),t=i(t);var r=e.length,u=n=void 0===n?r:s(o(n),0,r);return(n-=t.length)>=0&&e.slice(n,u)==t}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t,n){var s=n(16)({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});e.exports=s},function(e,t,n){var s=n(17),i=n(4),o=/[&<>"']/g,a=RegExp(o.source);e.exports=function(e){return(e=i(e))&&a.test(e)?e.replace(o,s):e}},function(e,t){e.exports=function(e,t){var n=-1,s=e.length;for(t||(t=Array(s));++n<s;)t[n]=e[n];return t}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t){e.exports=function(e,t,n,s){for(var i=n-1,o=e.length;++i<o;)if(s(e[i],t))return i;return-1}},function(e,t){e.exports=function(e,t,n){for(var s=n-1,i=e.length;++s<i;)if(e[s]===t)return s;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n,s){for(var i=e.length,o=n+(s?1:-1);s?o--:++o<i;)if(t(e[o],o,e))return o;return-1}},function(e,t,n){var s=n(24),i=n(23),o=n(22);e.exports=function(e,t,n){return t==t?o(e,t,n):s(e,i,n)}},function(e,t,n){var s=n(5),i=n(25),o=n(21),a=n(20),r=n(19),u=Array.prototype.splice;e.exports=function(e,t,n,p){var c=p?o:i,l=-1,d=t.length,h=e;for(e===t&&(t=r(t)),n&&(h=s(e,a(n)));++l<d;)for(var f=0,m=t[l],v=n?n(m):m;(f=c(h,v,f,p))>-1;)h!==e&&u.call(h,f,1),u.call(e,f,1);return e}},function(e,t,n){var s=n(26);e.exports=function(e,t){return e&&e.length&&t&&t.length?s(e,t):e}},function(e,t){var n=800,s=16,i=Date.now;e.exports=function(e){var t=0,o=0;return function(){var a=i(),r=s-(a-o);if(o=a,r>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var s=n(6)["__core-js_shared__"];e.exports=s},function(e,t,n){var s=n(31),i=function(){var e=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=function(e){return!!i&&i in e}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var s=n(1),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,r=s?s.toStringTag:void 0;e.exports=function(e){var t=o.call(e,r),n=e[r];try{e[r]=void 0;var s=!0}catch(e){}var i=a.call(e);return s&&(t?e[r]=n:delete e[r]),i}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(35))},function(e,t,n){var s=n(7),i=n(0),o="[object AsyncFunction]",a="[object Function]",r="[object GeneratorFunction]",u="[object Proxy]";e.exports=function(e){if(!i(e))return!1;var t=s(e);return t==a||t==r||t==o||t==u}},function(e,t,n){var s=n(37),i=n(32),o=n(0),a=n(30),r=/^\[object .+?Constructor\]$/,u=Function.prototype,p=Object.prototype,c=u.toString,l=p.hasOwnProperty,d=RegExp("^"+c.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(s(e)?d:r).test(a(e))}},function(e,t,n){var s=n(38),i=n(29);e.exports=function(e,t){var n=i(e,t);return s(n)?n:void 0}},function(e,t,n){var s=n(39),i=function(){try{var e=s(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var s=n(41),i=n(40),o=n(8),a=i?function(e,t){return i(e,"toString",{configurable:!0,enumerable:!1,value:s(t),writable:!0})}:o;e.exports=a},function(e,t,n){var s=n(42),i=n(28)(s);e.exports=i},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var s=n(44),i=Math.max;e.exports=function(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var o=arguments,a=-1,r=i(o.length-t,0),u=Array(r);++a<r;)u[a]=o[t+a];a=-1;for(var p=Array(t+1);++a<t;)p[a]=o[a];return p[t]=n(u),s(e,this,p)}}},function(e,t,n){var s=n(8),i=n(45),o=n(43);e.exports=function(e,t){return o(i(e,t,s),e+"")}},function(e,t,n){var s=n(46)(n(27));e.exports=s},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(47));function o(e,t){var n=e._act[t.category];n?n.call(e,t):e._act._default?e._act._default.call(e,t):assert(!1)}t.addListener=function(e,t,n){e.observable.addListener(t,n)},t.messageResponse=function(e){return function(t,n,s){t._act||(t._act={}),t._act[e||n]=t[n]}};var a=function(){function e(e){this.silent=!1,this.universalObservers=[],this.observers={},this.source=e}return e.prototype.send=function(e,t){if(!this.silent){var n={category:e,data:t,source:this.source},s=this.observers[n.category];if(s)for(var i=0;i<s.length;++i)o(s[i],n);for(i=0;i<this.universalObservers.length;++i)o(this.universalObservers[i],n)}},e.prototype.addListener=function(e,t){if(t)if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addListener(e,t[n]);else this.observers[t]||(this.observers[t]=[]),this.observers[t].push(e),this.listenerAdded(e,t);else this.universalObservers.push(e),this.listenerAdded(e);return this},e.prototype.removeListener=function(e,t){if(t){var n=this.observers[t];n&&i.default(n,e),this.listenerRemoved(e,t)}else{for(var s in this.observers)this.removeListener(e,s);i.default(this.universalObservers,e),this.listenerRemoved(e)}return this},e.prototype.listenerAdded=function(e,t){},e.prototype.listenerRemoved=function(e,t){},e}();t.Observable=a},function(e,t,n){"use strict";var s=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function s(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}}(),i=this&&this.__decorate||function(e,t,n,s){var i,o=arguments.length,a=o<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,s);else for(var r=e.length-1;r>=0;r--)(i=e[r])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},o=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))(function(i,o){function a(e){try{u(s.next(e))}catch(e){o(e)}}function r(e){try{u(s.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,r)}u((s=s.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,s,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(o){return function(r){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,s&&(i=2&o[0]?s.return:o[0]?s.throw||((i=s.return)&&i.call(s),0):s.next)&&!(i=i.call(s,o[1])).done)return i;switch(s=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,s=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],s=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,r])}}},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});Array.prototype.clear=function(){this.length=0};var u=n(48),p=r(n(18)),c=r(n(13)),l=function(){function e(e){this.courses=[],this.messagesShown={},this.observable=new u.Observable(this),this.elem=e,this.coursePills=e.find(".coursePills"),this.coursePanes=e.find(".coursePanes"),this.loadCourses()}return e.createInstance=function(t){e.instance=new e(t)},e.prototype.loadCourses=function(){return o(this,void 0,void 0,function(){var e,t;return a(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,$.getJSON("api/courseList")];case 1:return e=n.sent(),this.onCoursesLoad(e),[3,3];case 2:return q(t=n.sent(),t),[3,3];case 3:return[2]}})})},e.prototype.onCoursesLoad=function(e){var t=this;this.coursePills.empty(),this.coursePanes.empty(),this.courses.clear(),this.coursePanes.append($('<div class="tab-pane fade in active"><h1><span class="glyphicon glyphicon-arrow-left"></span> Please select a course.</h1></div>')),e.forEach(function(e){for(var n in e)e[n]=p.default(e[n]);var s=e.courseId,i=$('<li><a href="#'+s+'" data-toggle="pill"><h3>'+s+"</h3></a></li>");t.coursePills.append(i);var o=$('<div id="'+s+'" class="tab-pane fade"></div>');t.coursePanes.append(o);var a=new d(e,o);t.courses.push(a),i.find("a").click(function(){a.makeActive()})})},e.prototype.setActiveQueue=function(e){this._activeQueue=e,console.log("Setting active queue to "+e.queueId),this.updateSignUpForm(),this.observable.send("activeQueueSet")},e.prototype.activeQueue=function(){return this._activeQueue},e.prototype.updateSignUpForm=function(){this._activeQueue&&this._activeQueue.hasMap()?($("#signUpMapHolder").show(),$("#signUpMapMessage").show(),$("#signUpMapImage").attr("src",this._activeQueue.mapImageSrc)):($("#signUpMapHolder").hide(),$("#signUpMapMessage").hide())},e.prototype.userSignedIn=function(){this.courses.forEach(function(e){e.userSignedIn()})},e.prototype.refreshActiveQueue=function(){this._activeQueue&&this._activeQueue.refresh(),this.refreshContent()},e.prototype.message=function(e){this.messagesShown[e.id]||(this.messagesShown[e.id]=!0,$("#messageDialogHeader").html("Message"),$("#messageDialogContent").append('<p><span class="label label-info">'+e.sender+"</span> "+e.message+"</p>"),$("#messageDialog").modal("show"))},e.prototype.setSendMessagePostId=function(e){this.sendMessagePostId=e},e.prototype.sendMessage=function(e){$.ajax({type:"POST",url:"api/sendMessage",data:{idtoken:y.idToken(),id:this.sendMessagePostId,message:e},success:function(){},error:q})},e.prototype.refreshContent=function(){this._activeQueue&&(document.title=this._activeQueue.course.shortName+" OH ("+this._activeQueue.numEntries+")")},e.prototype.notify=function(e,t){Notification?"granted"!==Notification.permission?Notification.requestPermission():new Notification(e,{body:t}):alert(t)},e._name="QueueApplication",e}();t.QueueApplication=l;var d=function(){function e(e,t){this.isAdmin=!1,this.queues=[],this.courseId=e.courseId,this.shortName=e.shortName,this.fullName=e.fullName,this.elem=t,this.queuePillsElem=$('<ul class="queuePills nav nav-pills"></ul>'),this.elem.append(this.queuePillsElem),this.pickAQueueElem=$("<div></div>"),this.pickAQueueElem.append($('<h3><span class="glyphicon glyphicon-arrow-up"></span> Several queues are available for '+this.shortName+". Please select one.</h3>")),this.elem.append(this.pickAQueueElem),this.mainElem=$("<div></div>"),this.mainElem.hide(),this.queuePanesElem=$('<div class="col-xs-12 col-md-12 queuePanes tab-content"></div>'),this.mainElem.append(this.queuePanesElem),this.contentElem=$('<div class="col-xs-12 col-md-12"></div>'),this.mainElem.append(this.contentElem),this.elem.append(this.mainElem),this.loadContent(),this.loadQueues()}return e.prototype.makeActive=function(){this.activeQueue&&this.activeQueue.makeActive()},e.prototype.loadContent=function(){this.contentElem.load("queue-component/courseContent/"+this.courseId)},e.prototype.loadQueues=function(){var e=this;return $.ajax({type:"GET",url:"api/queueList/"+this.courseId,dataType:"json",success:function(t){e.onQueuesLoad(t)},error:q})},e.prototype.onQueuesLoad=function(e){var t=this;this.queues.clear(),this.queuePillsElem.empty(),this.queuePanesElem.empty(),e.forEach(function(e){var n=e.name,s=e.queueId,i=$('<li><a data-toggle="pill"><h6>'+n+"</h6></a></li>");i.find("a").prop("href","#queue"+s),t.queuePillsElem.append(i);var o=$('<div id="queue'+s+'"></div>');o.addClass("tab-pane fade"),t.queuePanesElem.append(o);var a=new h(e,t,o);t.queues.push(a),a.refresh(),i.find("a").click(function(){t.pickAQueueElem.empty(),t.activeQueue=a,t.mainElem.show(),a.makeActive()})}),1===this.queues.length?(this.queuePillsElem.children().first().addClass("active"),this.queuePanesElem.children().first().addClass("in active"),this.activeQueue=this.queues[0],this.pickAQueueElem.hide(),this.mainElem.show()):(this.pickAQueueElem.show(),this.mainElem.hide()),this.setAdmin(y.isCourseAdmin(this.courseId))},e.prototype.setAdmin=function(e){this.isAdmin=e;for(var t=0;t<this.queues.length;++t)this.queues[t].setAdmin(e);this.isAdmin?(this.elem.addClass("admin"),this.elem.removeClass("notAdmin")):(this.elem.addClass("notAdmin"),this.elem.removeClass("admin"))},e.prototype.userSignedIn=function(){this.setAdmin(y.isCourseAdmin(this.courseId)),this.queues.forEach(function(e){e.userSignedIn()})},e}(),h=function(){function e(e,t,n){this.observable=new u.Observable(this),this.isAdmin=!1,this.numEntries=0,this.lastRefresh=new Date,this.isOpen=!1,this.myRequest=null,this.mapImageSrc="",this.refreshDisabled=!1,this.currentRefreshIndex=0,this.course=t,this.queueId=e.queueId,this.location=e.location,this.mapImageSrc=e.map?e.map:"",this.name=e.name,this.elem=n,this.isAdmin=!1,this.numEntries=0,this.currentRefreshIndex=0,this.lastRefresh=new Date,this.isOpen=!1,this.refreshDisabled=!1;var s=$("<p></p>").appendTo(this.elem);s.append($('<span data-toggle="tooltip" title="Number of Students"><span class="glyphicon glyphicon-education"></span></span>').append(" ").append(this.numEntriesElem=$("<span></span>"))),s.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"),s.append($('<span data-toggle="tooltip" title="Last Refresh"><span class="glyphicon glyphicon-refresh"></span></span>').append(" ").append(this.lastRefreshElem=$("<span></span>"))),s.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"),this.statusMessageElem=$("<span>Loading queue information...</span>"),s.append(this.statusMessageElem),this.adminStatusElem=$('<span class="adminOnly"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You are an admin for this queue.</b></span>'),s.append(this.adminStatusElem),this.announcementContainerElem=$('<div class = "panel panel-info"></div>').appendTo(this.elem),this.announcementContainerElem.append($('<div class="panel-body bg-info"></div>').append('<span class="glyphicon glyphicon-bullhorn"></span> ').append(this.announcementMessageElem=$("<strong></strong>"))),this.adminControlsElem=$('<div class="panel panel-default adminOnly"><div class="panel-body"></div></div>').appendTo(this.elem).find(".panel-body"),this.adminControls=new m(this,this.adminControlsElem),this.studentControlsElem=$('<div class="panel panel-default"><div class="panel-body"></div></div>').appendTo(this.elem).find(".panel-body"),this.studentControls=new f(this,this.studentControlsElem),this.observable.addListener(this.studentControls),this.queueElem=$("<div></div>").appendTo(this.elem),this.stackElem=$('<div class="adminOnly"></div>').appendTo(this.elem),this.elem.find('[data-toggle="tooltip"]').tooltip(),this.userSignedIn()}return e.prototype.makeActiveOnClick=function(e){var t=this;e.click(function(){t.makeActive()})},e.prototype.makeActive=function(){l.instance.setActiveQueue(this),this.refresh()},e.prototype.refresh=function(){var e=this;this.currentRefreshIndex+=1;var t=this.currentRefreshIndex;return $.ajax({type:"POST",url:"api/list",data:{queueId:this.queueId},dataType:"json",success:function(n){t===e.currentRefreshIndex&&e.refreshResponse(n)},error:q})},e.prototype.refreshResponse=function(e){if(!this.refreshDisabled){if(e.message&&l.instance.message(e.message),e.announcement?(this.announcementMessageElem.html(e.announcement),this.announcementContainerElem.show()):(this.announcementContainerElem.hide(),this.announcementMessageElem.html("")),this.isOpen=e.isOpen,this.isOpen)this.statusMessageElem.html("The queue is open.");else{for(var t=e.schedule,n=-1,s=e.halfHour;s<48;++s){var i=t.charAt(s);if("o"===i||"p"===i){n=s;break}}if(-1===n)this.statusMessageElem.html("The queue is closed for today.");else{var o=new Date;o.setHours(0),o.setMinutes(0),o.setSeconds(0);var a=new Date(o.getTime()+30*n*6e4);this.statusMessageElem.html("The queue is closed right now. It will open at "+a.toLocaleTimeString()+".")}}var r=e.queue;this.queueElem.empty();var u=[],p=null;for(s=0;s<r.length;++s){var c=r[s],d=$("<li class='list-group-item'></li>"),h=new v(this,c,s,d);u.push(h),!p&&y.isMe(h.email)&&(p=h),this.queueElem.append(d)}this.setMyRequest(p),this.observable.send("queueRefreshed"),this.stackElem.html("<h3>The Stack</h3><br /><p>Most recently removed at top</p><pre>"+JSON.stringify(e.stack,null,4)+"</pre>");var f=this.numEntries;this.numEntries=r.length,this.isAdmin&&0===f&&this.numEntries>0&&l.instance.notify("Request Received!",u[0].name),this.lastRefresh=new Date,this.numEntriesElem.html(""+this.numEntries),this.lastRefreshElem.html(this.lastRefresh.toLocaleTimeString())}},e.prototype.setMyRequest=function(e){this.myRequest=e,this.observable.send("myRequestSet")},e.prototype.removeRequest=function(e){console.log("attempting to remove "+e.email+" from queue "+this.queueId),this.disableRefresh();var t=this;$.ajax({type:"POST",url:"api/remove",data:{id:e.id},success:function(){console.log("successfully removed "+e.email+" from queue "+t.queueId),e.onRemove()},error:q}).always(function(){setTimeout(function(){t.enableRefresh(),t.refresh()},500)})},e.prototype.cancelIncomingRefresh=function(){this.currentRefreshIndex+=1},e.prototype.disableRefresh=function(){this.refreshDisabled=!0},e.prototype.enableRefresh=function(){this.refreshDisabled=!1},e.prototype.clear=function(){var e=this;return $.ajax({type:"POST",url:"api/clear",data:{idtoken:y.idToken(),queueId:this.queueId},success:function(){e.clearList()},error:q})},e.prototype.clearList=function(){this.queueElem.children().slideUp()},e.prototype.signUp=function(e,t,n,s,i){var o=this;return $.ajax({type:"POST",url:"api/signUp",data:{idtoken:y.idToken(),queueId:this.queueId,name:e,location:t,mapX:s,mapY:i,description:n},dataType:"json",success:function(e){e.fail?E(e.reason):o.refresh()},error:q})},e.prototype.updateRequest=function(e,t,n,s,i){var o=this;return $.ajax({type:"POST",url:"api/updateRequest",data:{id:this.myRequest.id,name:e,location:t,mapX:s,mapY:i,description:n},dataType:"json",success:function(e){e.fail?E(e.reason):o.refresh()},error:q})},e.prototype.setAdmin=function(e){var t=this.isAdmin;this.isAdmin=e,t!=this.isAdmin&&this.refresh()},e.prototype.userSignedIn=function(){this.observable.send("userSignedIn")},e.prototype.hasMap=function(){return""!==this.mapImageSrc},e.prototype.updateGroups=function(e){e.append("queueId",this.queueId),$.ajax({type:"POST",url:"api/updateGroups",cache:!1,contentType:!1,processData:!1,data:e,dataType:"json",success:function(e){e.success?alert("groups uploaded successfully"):alert("error uploading groups. roster and groups have been cleared - you'll have to upload them again, sorry!")},error:function(e){alert("error uploading groups")}})},e.prototype.updateConfiguration=function(e){return e.queueId=this.queueId,$.ajax({type:"POST",url:"api/updateQueueConfiguration",data:e,dataType:"json",success:function(e){e.fail&&E(e.reason)},error:q})},e}(),f=function(){function e(t,n){var s=this;this.queue=t,this.elem=n,this.formHasChanges=!1;var i,o=$("<div></div>");if(this.signUpForm=$('<form id="signUpForm" role="form" class="form-horizontal"></form>').append(i=$("<div></div>").append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpName'+t.queueId+'">Name:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpNameInput=$('<input type="text" class="form-control" id="signUpName'+t.queueId+'" required="required" maxlength="30" placeholder="Nice to meet you!">')))).append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpDescription'+t.queueId+'">Description:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpDescriptionInput=$('<input type="text" class="form-control" id="signUpDescription'+t.queueId+'"required="required" maxlength="100" placeholder="e.g. Segfault in function X, using the map data structure, etc.">')))).append($('<div class="form-group"></div>').append('<label class="control-label col-sm-3" for="signUpLocation'+t.queueId+'">Location:</label>').append($('<div class="col-sm-9"></div>').append(this.signUpLocationInput=$('<input type="text" class="form-control" id="signUpLocation'+t.queueId+'"required="required" maxlength="30" placeholder="e.g. Computer #36, laptop by glass/atrium door, etc.">')))).append('<div class="hidden-xs form-group"><div class="col-sm-offset-3 col-sm-9"><button type="submit" class="btn btn-success queue-signUpButton">Sign Up</button> <button type="submit" class="btn btn-success queue-updateRequestButton" style="display:none;"></button></div></div>')),o.append(this.signUpForm),this.statusElem=$("<div></div>"),o.append(this.statusElem),this.signUpForm.find("input").on("input",function(){s.formChanged()}),this.queue.hasMap()){i.addClass("col-xs-12 col-sm-8"),i.css("padding","0"),this.signUpForm.append(this.mapHolder=$('<div class="col-xs-12 col-sm-4" style="position: relative; padding:0"></div>').append(this.signUpMap=$('<img src="img/'+this.queue.mapImageSrc+'" class="queue-signUpMap" style="width:100%"></img>')).append(this.signUpPin=$('<span class="queue-locatePin"><span class="glyphicon glyphicon-map-marker" style="position:absolute; left:-1.3ch;top:-0.95em;"></span></span>'))),this.signUpForm.append($('<div class="visible-xs col-xs-12" style="padding: 0;"><div class="form-group"><div class="col-sm-offset-3 col-sm-9"><button type="submit" class="btn btn-success queue-signUpButton">Sign Up</button> <button type="submit" class="btn btn-success queue-updateRequestButton" style="display:none;"></button></div></div></div>'));var a=this.signUpPin;this.mapX=50,this.mapY=50;var r=this;this.signUpMap.click(function(e){r.mapX=100*Math.trunc(e.pageX-$(this).offset().left)/$(this).width(),r.mapY=100*Math.trunc(e.pageY-$(this).offset().top)/$(this).height(),a.css("left",r.mapX+"%"),a.css("top",r.mapY+"%"),r.formChanged()}),this.signUpLocationInput.val("Click on the map!"),this.signUpLocationInput.prop("disabled",!0)}this.signUpForm.submit(function(t){t.preventDefault();var n=s.signUpNameInput.val(),i=s.signUpDescriptionInput.val(),o=s.signUpLocationInput.val();return n&&0!=n.length&&o&&0!=o.length&&i&&0!=i.length?(s.queue.myRequest?s.queue.updateRequest(n,o,i,s.mapX,s.mapY):s.queue.signUp(n,o,i,s.mapX,s.mapY),s.formHasChanges=!1,s.updateRequestButtons.removeClass("btn-warning"),s.updateRequestButtons.addClass("btn-success"),s.updateRequestButtons.prop("disabled",!0),s.updateRequestButtons.html(e.UPDATE_REQUEST_BUTTON_UP_TO_DATE),!1):(E("You must fill in all the fields."),!1)}),this.signUpButtons=this.signUpForm.find("button.queue-signUpButton"),this.updateRequestButtons=this.signUpForm.find("button.queue-updateRequestButton").prop("disabled",!0).html(e.UPDATE_REQUEST_BUTTON_UP_TO_DATE),this.elem.append(o)}return e.prototype.formChanged=function(){this.queue.myRequest&&(this.formHasChanges=!0,this.updateRequestButtons.removeClass("btn-success"),this.updateRequestButtons.addClass("btn-warning"),this.updateRequestButtons.prop("disabled",!1),this.updateRequestButtons.html(e.UPDATE_REQUEST_BUTTON_UPDATE))},e.prototype.refreshSignInEnabled=function(){var e=y.isUmich()&&this.queue.isOpen&&!this.queue.myRequest;this.signUpButtons.prop("disabled",!e),this.queue.myRequest&&this.updateRequestButtons.show()},e.prototype.queueRefreshed=function(){this.refreshSignInEnabled()},e.prototype.userSignedIn=function(){this.refreshSignInEnabled()},e.prototype.myRequestSet=function(){var e=this.queue.myRequest;this.statusElem.html(""),e&&!this.formHasChanges&&(this.signUpNameInput.val(e.name),this.signUpDescriptionInput.val(e.description||""),this.signUpLocationInput.val(e.location||""),this.queue.hasMap()&&(this.mapX=e.mapX,this.mapY=e.mapY,this.signUpPin.css("left",this.mapX+"%"),this.signUpPin.css("top",this.mapY+"%")),"EECS 280"==this.queue.course.shortName&&this.statusElem.html("EECS280: You are at position "+e.index+" in the queue"),this.statusElem.html("You are at position "+e.index+" in the queue"))},e._name="StudentControls",e.UPDATE_REQUEST_BUTTON_UP_TO_DATE="<span class='glyphicon glyphicon-ok'></span> Request Updated",e.UPDATE_REQUEST_BUTTON_UPDATE="Update Request",i([u.messageResponse()],e.prototype,"queueRefreshed",null),i([u.messageResponse()],e.prototype,"userSignedIn",null),i([u.messageResponse()],e.prototype,"myRequestSet",null),e}(),m=function(){function e(e,t){this.queue=e,this.elem=t,this.elem.append("<p><b>Admin Controls</b></p>");var n=$('<button type="button" class="btn btn-danger adminOnly" data-toggle="modal" data-target="#clearTheQueueDialog">Clear the queue</button>');this.queue.makeActiveOnClick(n),this.elem.append(n),this.elem.append(" ");var s=$('<button type="button" class="btn btn-info adminOnly" data-toggle="modal" data-target="#scheduleDialog">Schedule</button>');this.queue.makeActiveOnClick(s),this.elem.append(s),this.elem.append(" ");var i=$('<button type="button" class="btn btn-info adminOnly" data-toggle="modal" data-target="#manageQueueDialog">Manage Queue</button>');this.queue.makeActiveOnClick(i),this.elem.append(i)}return e._name="AdminControls",e}(),v=function(){function e(e,t,n,s){this.queue=e,this.id=t.id,this.email=t.email,this.index=n,this.isMe=!!t.name,this.elem=s;var i=$('<div class="queue-entryInfo"></div>'),o=t.name?t.name+" ("+t.email+")":"Anonymous Student";this.nameElem=$('<p><span class="glyphicon glyphicon-education"></span></p>').append(" "+o).appendTo(i),this.name=t.name,t.location&&t.location.length>0&&(this.locationElem=$('<p><span class="glyphicon glyphicon-map-marker"></span></p>').append(" "+t.location).appendTo(i),this.location=t.location),t.description&&t.description.length>0&&(this.descriptionElem=$('<p><span class="glyphicon glyphicon-question-sign"></span></p>').append(" "+t.description).appendTo(i),this.description=t.description);var a=Date.now()-new Date(1e3*parseInt(t.ts)).getTime(),r=Math.round(a/1e3/60);this.tsElem=$('<p><span class="glyphicon glyphicon-time"></span></p>').append(" "+r+" min").appendTo(i);var u=$('<button type="button" class="btn btn-danger">Remove</button>');this.isMe||u.addClass("adminOnly"),u.on("click",this.queue.removeRequest.bind(this.queue,this)),i.append(u),i.append(" ");var p=$('<button type="button" class="btn btn-warning adminOnly">Message</button>'),c=this;if(p.on("click",function(){$("#sendMessageDialog").modal("show"),l.instance.setSendMessagePostId(c.id)}),i.append(p),this.queue.hasMap()&&void 0!==t.mapX&&void 0!==t.mapY){var d=this.mapX=parseFloat(t.mapX),h=this.mapY=parseFloat(t.mapY),f=$('<div class="adminOnly" style="display:inline-block; vertical-align: top; width: 25%; margin-right: 10px"></div>');this.elem.append(f);var m=$('<div style="position: relative"></div>');this.mapElem=$('<img class="adminOnly queue-entryMap" src="img/'+this.queue.mapImageSrc+'"></img>'),m.append(this.mapElem),this.mapPin=$('<span class="adminOnly queue-locatePin"><span class="glyphicon glyphicon-map-marker" style="position:absolute; left:-1.3ch;top:-0.95em;"></span></span>'),this.mapPin.css("left",d+"%"),this.mapPin.css("top",h+"%"),m.append(this.mapPin),f.append(m)}this.elem.append(i)}return e.prototype.onRemove=function(){this.elem.slideUp(500,function(){$(this).remove()})},e._name="QueueEntry",e}(),g=function(){function e(t){var n=this,s=$("#scheduleDialog");$("#scheduleForm").submit(function(e){return e.preventDefault(),n.update(),s.modal("hide"),!1}),s.on("shown.bs.modal",function(){n.refresh()});var i=$("#schedulePicker"),o=$("<tr></tr>").appendTo(i);o.append('<td style="width:1em; padding-right: 3px;"></td>');for(var a=0;a<24;++a)o.append('<td colspan="2">'+(0===a||12===a?12:a%12)+"</td>");this.unitElems=[];for(var r=["S","M","T","W","T","F","S"],u=0;u<7;++u){var p=[],c=$("<tr></tr>");c.append('<td style="width:1em; text-align: right; padding-right: 3px;">'+r[u]+"</td>");for(var l=0;l<48;++l){var d=$('<td><div class="scheduleUnit"></div></td>').appendTo(c).find(".scheduleUnit");p.push(d)}this.unitElems.push(p),i.append(c)}var h=!1;i.on("mousedown",function(e){return e.preventDefault(),h=!0,!1}),i.on("mouseup",function(){h=!1}),i.on("mouseleave",function(){h=!1}),s.on("hidden.bs.modal",function(){h=!1});var f=function(t){if(h){var n=t.data("scheduleType");t.removeClass("scheduleUnit-"+n);var s=e.sequence[n];t.data("scheduleType",s),t.addClass("scheduleUnit-"+s)}};i.on("mouseover",".scheduleUnit",function(e){return e.preventDefault(),f($(this)),!1}),i.on("mousedown",".scheduleUnit",function(e){return e.preventDefault(),h=!0,f($(this)),!1})}return e.prototype.refresh=function(){var e=this,t=l.instance.activeQueue();if(t)return $.ajax({type:"GET",url:"api/schedule/"+t.queueId,dataType:"json",success:function(t){for(var n=t,s=0;s<7;++s)for(var i=0;i<48;++i){var o=e.unitElems[s][i];o.removeClass(),o.addClass("scheduleUnit"),o.addClass("scheduleUnit-"+n[s].charAt(i)),o.data("scheduleType",n[s].charAt(i))}},error:q})},e.prototype.update=function(){if(l.instance.activeQueue()){for(var e=[],t=0;t<7;++t)e.push(this.unitElems[t].map(function(e){return e.data("scheduleType")}).join(""));var n=l.instance.activeQueue();return n?$.ajax({type:"POST",url:"api/updateSchedule",data:{idtoken:y.idToken(),queueId:n.queueId,schedule:e},success:function(){console.log("schedule updated")},error:q}):void 0}},e.sequence={o:"c",c:"p",p:"o"},e}();t.Schedule=g;var y,b=function(){function e(){var e=this,t=($("#manageQueueDialog"),$("#groupsForm"));t.submit(function(e){e.preventDefault();var n=new FormData(t[0]),s=l.instance.activeQueue();return s&&s.updateGroups(n),!1}),$("#policiesForm").submit(function(t){return t.preventDefault(),e.update(),!1}),this.updateConfigurationButton=$("#updateConfigurationButton"),$("#preventUnregisteredCheckbox").change(this.unsavedChanges.bind(this)),$("#preventGroupsCheckbox").change(this.unsavedChanges.bind(this)),$("#prioritizeNewCheckbox").change(this.unsavedChanges.bind(this)),l.instance.observable.addListener(this),this.refresh()}return e.prototype.refresh=function(){var e=l.instance.activeQueue();if(e&&e.isAdmin)return $("#checkQueueRosterLink").attr("href","api/roster/"+e.queueId),$("#checkQueueGroupsLink").attr("href","api/groups/"+e.queueId),$.ajax({type:"GET",url:"api/queueConfiguration/"+e.queueId,dataType:"json",success:this.refreshResponse.bind(this),error:q})},e.prototype.refreshResponse=function(e){console.log(JSON.stringify(e)),$("#preventUnregisteredCheckbox").prop("checked","y"===e.preventUnregistered),$("#preventGroupsCheckbox").prop("checked","y"===e.preventGroups),$("#prioritizeNewCheckbox").prop("checked","y"===e.prioritizeNew),this.changesUpToDate()},e.prototype.update=function(){var e=l.instance.activeQueue();e&&e.updateConfiguration({preventUnregistered:$("#preventUnregisteredCheckbox").is(":checked")?"y":"n",preventGroups:$("#preventGroupsCheckbox").is(":checked")?"y":"n",prioritizeNew:$("#prioritizeNewCheckbox").is(":checked")?"y":"n"}).done(this.changesUpToDate.bind(this))},e.prototype.unsavedChanges=function(){this.updateConfigurationButton.html(e.POLICIES_UNSAVED).prop("disabled",!1).removeClass("btn-success").addClass("btn-warning")},e.prototype.changesUpToDate=function(){this.updateConfigurationButton.html(e.POLICIES_UP_TO_DATE).prop("disabled",!0).removeClass("btn-warning").addClass("btn-success")},e.POLICIES_UP_TO_DATE='<span><span class="glyphicon glyphicon-floppy-saved"></span> Saved</span>',e.POLICIES_UNSAVED='<span><span class="glyphicon glyphicon-floppy-open"></span> Update Configuration</span>',i([u.messageResponse("activeQueueSet")],e.prototype,"refresh",null),e}();if(t.ManageQueueDialog=b,function(e){e.signIn=function(t,s){var i=new n(t,s),o=$("#accountMessage");i.isUmich()||(o.show(),o.html("Hi "+i.email+"! Please <a>sign out</a> and switch to an @umich.edu account to use the queue."),o.find("a").click(function(){gapi.auth2.getAuthInstance().disconnect().then(function(){e.signOut(),o.hide()})}),$(".openSignUpDialogButton").prop("disabled",!0))},e.signOut=function(){$("#accountMessage").hide(),o&&o.onSignOut(),new i},e.idToken=function(){return o.idToken()},e.isUmich=function(){return o.isUmich()},e.isCourseAdmin=function(e){return o.isCourseAdmin(e)},e.isMe=function(e){return o.isMe(e)};var t=function(){function e(){}return e.prototype.onSignOut=function(){},e.prototype.onFinishSigningIn=function(){o=this,l.instance&&l.instance.userSignedIn()},e._name="UserBase",e}(),n=function(e){function t(t,n){var s=e.call(this)||this;return s.admins={},s.email=t,s._idToken=n,$.ajax({type:"POST",url:"api/login",data:{idtoken:s.idToken()},success:function(e){s.checkAdmin()},error:q}),s}return s(t,e),t.prototype.isUmich=function(){return c.default(this.email,"@umich.edu")},t.prototype.isMe=function(e){return this.email===e},t.prototype.idToken=function(){return this._idToken},t.prototype.checkAdmin=function(){var e=this;$.ajax({type:"POST",url:"api/adminCourses",data:{idtoken:this.idToken()},dataType:"json",success:function(t){for(var n=0;n<t.length;++n)e.admins[t[n].courseId]=!0;t.length>0?(setInterval(function(){l.instance.refreshActiveQueue()},5e3),Notification&&Notification.requestPermission()):setInterval(function(){l.instance.refreshActiveQueue()},6e4),e.onFinishSigningIn()},error:q})},t.prototype.isCourseAdmin=function(e){return this.admins[e]},t}(t),i=function(e){function t(){var t=e.call(this)||this;return t.onFinishSigningIn(),setInterval(function(){l.instance.refreshActiveQueue()},6e4),t}return s(t,e),t.prototype.isUmich=function(){return!1},t.prototype.idToken=function(){return""},t.prototype.isCourseAdmin=function(e){return!1},t.prototype.isMe=function(e){return!1},t}(t),o=new i}(y=t.User||(t.User={})),"object"==typeof sessionStorage)try{sessionStorage.setItem("localStorage","1"),sessionStorage.removeItem("localStorage")}catch(e){q(null,"It looks like local storage is disabled in your browser. This may aggravate an issue with Google sign-in on Safari or iOS while using private browsing mode.")}function q(e,t){"abort"!==t&&(console.log("Oops. An error occurred. Try refreshing the page."),$("#oopsDialog").modal("show"))}function E(e){console.log(e),$("#errorMessage").html(e),$("#errorDialog").modal("show")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n(49);function i(e){var t=e.getBasicProfile();s.User.signIn(t.getEmail(),e.getAuthResponse().id_token)}$(document).ready(function(){s.QueueApplication.createInstance($("#queueApplication")),function(){var e=$("#clearInput"),t=$("#clearTheQueueDialog");t.on("shown.bs.modal",function(){e.focus()}),t.on("show.bs.modal",function(){e.val("")}),e.on("input",function(e){if("clear"==$(this).val()){t.modal("hide");var n=s.QueueApplication.instance.activeQueue();n&&n.clear()}});var n=$("#signUpDialog");n.on("show.bs.modal",function(){$(this).find("input").val("")}),n.on("shown.bs.modal",function(){$(this).find("input:first").focus()});var i=$("#sendMessageDialog");i.on("show.bs.modal",function(){$(this).find("input").val("")}),i.on("shown.bs.modal",function(){$(this).find("input:first").focus()}),$("#sendMessageForm").submit(function(e){e.preventDefault();var t=$("#sendMessageContent").val();return t&&0!=t.length?(s.QueueApplication.instance.sendMessage(t),i.modal("hide"),!1):(alert("You can't send a blank message."),!1)}),new s.Schedule($("#schedulePicker")),new s.ManageQueueDialog}(),gapi.signin2.render("googleSignInButton",{scope:"profile email",width:240,height:50,longtitle:!0,theme:"dark",onsuccess:i})}),console.log("TEST BLAH")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsYW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZW5kc1dpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VzY2FwZUh0bWxDaGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2ZXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmFOLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVB1bGxBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wdWxsQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3B1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWwvbWl4aW5zLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9xdWV1ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInR5cGUiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwic3ltYm9sVGFnIiwiYXJyYXlNYXAiLCJpc0FycmF5IiwiaXNTeW1ib2wiLCJJTkZJTklUWSIsInN5bWJvbFByb3RvIiwidW5kZWZpbmVkIiwic3ltYm9sVG9TdHJpbmciLCJ0b1N0cmluZyIsImJhc2VUb1N0cmluZyIsInJlc3VsdCIsImFycmF5IiwiaXRlcmF0ZWUiLCJpbmRleCIsImxlbmd0aCIsIkFycmF5IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwiaXNPYmplY3QiLCJOQU4iLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50Iiwib3RoZXIiLCJ2YWx1ZU9mIiwicmVwbGFjZSIsImlzQmluYXJ5IiwidGVzdCIsInNsaWNlIiwidG9OdW1iZXIiLCJNQVhfSU5URUdFUiIsInRvRmluaXRlIiwicmVtYWluZGVyIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbGFtcCIsInRvSW50ZWdlciIsInN0cmluZyIsInRhcmdldCIsInBvc2l0aW9uIiwiZW5kIiwiZXNjYXBlSHRtbENoYXIiLCJiYXNlUHJvcGVydHlPZiIsIiYiLCI8IiwiPiIsIlwiIiwiJyIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsImZ1bmMiLCJmcm9tSW5kZXgiLCJjb21wYXJhdG9yIiwicHJlZGljYXRlIiwiZnJvbVJpZ2h0IiwiYmFzZUZpbmRJbmRleCIsImJhc2VJc05hTiIsInN0cmljdEluZGV4T2YiLCJiYXNlSW5kZXhPZiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VVbmFyeSIsImNvcHlBcnJheSIsInNwbGljZSIsInZhbHVlcyIsImluZGV4T2YiLCJzZWVuIiwiY29tcHV0ZWQiLCJiYXNlUHVsbEFsbCIsIkhPVF9DT1VOVCIsIkhPVF9TUEFOIiwibmF0aXZlTm93IiwiRGF0ZSIsIm5vdyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJmdW5jVG9TdHJpbmciLCJlIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJ1aWQiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RQcm90byIsImlzT3duIiwidGFnIiwidW5tYXNrZWQiLCJnIiwidGhpcyIsImV2YWwiLCJ3aW5kb3ciLCJnbG9iYWwiLCJhc3luY1RhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJwcm94eVRhZyIsImlzRnVuY3Rpb24iLCJpc01hc2tlZCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwicmVJc05hdGl2ZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwiZ2V0TmF0aXZlIiwiY29uc3RhbnQiLCJpZGVudGl0eSIsImJhc2VTZXRUb1N0cmluZyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic2V0VG9TdHJpbmciLCJzaG9ydE91dCIsInRoaXNBcmciLCJhcmdzIiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsInN0YXJ0IiwidHJhbnNmb3JtIiwib3RoZXJBcmdzIiwib3ZlclJlc3QiLCJwdWxsIiwiYmFzZVJlc3QiLCJwdWxsXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWNlaXZlTWVzc2FnZSIsIm9ic2VydmVyIiwibXNnIiwiY2F0QWN0IiwiX2FjdCIsImNhdGVnb3J5IiwiX2RlZmF1bHQiLCJhc3NlcnQiLCJhZGRMaXN0ZW5lciIsIm9ialdpdGhPYnNlcnZhYmxlIiwibGlzdGVuZXIiLCJvYnNlcnZhYmxlIiwibWVzc2FnZVJlc3BvbnNlIiwibWVzc2FnZUNhdGVnb3J5IiwicHJvcGVydHlLZXkiLCJkZXNjcmlwdG9yIiwiT2JzZXJ2YWJsZSIsInNpbGVudCIsInVuaXZlcnNhbE9ic2VydmVycyIsIm9ic2VydmVycyIsInNlbmQiLCJkYXRhIiwicHVzaCIsImxpc3RlbmVyQWRkZWQiLCJyZW1vdmVMaXN0ZW5lciIsImRlZmF1bHQiLCJsaXN0ZW5lclJlbW92ZWQiLCJjYXQiLCJjbGVhciIsIm1peGluc18xIiwiZXNjYXBlXzEiLCJlbmRzV2l0aF8xIiwiUXVldWVBcHBsaWNhdGlvbiIsImVsZW0iLCJjb3Vyc2VzIiwibWVzc2FnZXNTaG93biIsImNvdXJzZVBpbGxzIiwiZmluZCIsImNvdXJzZVBhbmVzIiwibG9hZENvdXJzZXMiLCJjcmVhdGVJbnN0YW5jZSIsImluc3RhbmNlIiwiJCIsImdldEpTT04iLCJsaXN0IiwiX2EiLCJzZW50Iiwib25Db3Vyc2VzTG9hZCIsIm9vcHMiLCJlXzEiLCJfdGhpcyIsImVtcHR5IiwiYXBwZW5kIiwiZm9yRWFjaCIsImNvdXJzZURhdGEiLCJjb3Vyc2VJZCIsInBpbGxFbGVtIiwiY291cnNlRWxlbSIsImNvdXJzZSIsIkNvdXJzZSIsImNsaWNrIiwibWFrZUFjdGl2ZSIsInNldEFjdGl2ZVF1ZXVlIiwicXVldWUiLCJfYWN0aXZlUXVldWUiLCJjb25zb2xlIiwibG9nIiwicXVldWVJZCIsInVwZGF0ZVNpZ25VcEZvcm0iLCJhY3RpdmVRdWV1ZSIsImhhc01hcCIsInNob3ciLCJhdHRyIiwibWFwSW1hZ2VTcmMiLCJoaWRlIiwidXNlclNpZ25lZEluIiwicmVmcmVzaEFjdGl2ZVF1ZXVlIiwicmVmcmVzaCIsInJlZnJlc2hDb250ZW50IiwibWVzc2FnZSIsImlkIiwiaHRtbCIsIm1vZGFsIiwic2V0U2VuZE1lc3NhZ2VQb3N0SWQiLCJzZW5kTWVzc2FnZVBvc3RJZCIsInNlbmRNZXNzYWdlIiwiYWpheCIsInVybCIsImlkdG9rZW4iLCJVc2VyIiwiaWRUb2tlbiIsInN1Y2Nlc3MiLCJlcnJvciIsImRvY3VtZW50IiwidGl0bGUiLCJzaG9ydE5hbWUiLCJudW1FbnRyaWVzIiwibm90aWZ5IiwiTm90aWZpY2F0aW9uIiwicGVybWlzc2lvbiIsInJlcXVlc3RQZXJtaXNzaW9uIiwiYm9keSIsImFsZXJ0IiwiX25hbWUiLCJpc0FkbWluIiwicXVldWVzIiwiZnVsbE5hbWUiLCJxdWV1ZVBpbGxzRWxlbSIsInBpY2tBUXVldWVFbGVtIiwibWFpbkVsZW0iLCJxdWV1ZVBhbmVzRWxlbSIsImNvbnRlbnRFbGVtIiwibG9hZENvbnRlbnQiLCJsb2FkUXVldWVzIiwibG9hZCIsImRhdGFUeXBlIiwib25RdWV1ZXNMb2FkIiwiaXRlbSIsInByb3AiLCJxdWV1ZUVsZW0iLCJhZGRDbGFzcyIsIlF1ZXVlIiwiY2hpbGRyZW4iLCJmaXJzdCIsInNldEFkbWluIiwiaXNDb3Vyc2VBZG1pbiIsInJlbW92ZUNsYXNzIiwibGFzdFJlZnJlc2giLCJpc09wZW4iLCJteVJlcXVlc3QiLCJyZWZyZXNoRGlzYWJsZWQiLCJjdXJyZW50UmVmcmVzaEluZGV4IiwibG9jYXRpb24iLCJzdGF0dXNFbGVtIiwiYXBwZW5kVG8iLCJudW1FbnRyaWVzRWxlbSIsImxhc3RSZWZyZXNoRWxlbSIsInN0YXR1c01lc3NhZ2VFbGVtIiwiYWRtaW5TdGF0dXNFbGVtIiwiYW5ub3VuY2VtZW50Q29udGFpbmVyRWxlbSIsImFubm91bmNlbWVudE1lc3NhZ2VFbGVtIiwiYWRtaW5Db250cm9sc0VsZW0iLCJhZG1pbkNvbnRyb2xzIiwiQWRtaW5Db250cm9scyIsInN0dWRlbnRDb250cm9sc0VsZW0iLCJzdHVkZW50Q29udHJvbHMiLCJTdHVkZW50Q29udHJvbHMiLCJzdGFja0VsZW0iLCJ0b29sdGlwIiwibWFrZUFjdGl2ZU9uQ2xpY2siLCJteVJlZnJlc2hJbmRleCIsInJlZnJlc2hSZXNwb25zZSIsInNjaGVkdWxlIiwibmV4dE9wZW4iLCJzY2hlZHVsZVR5cGUiLCJjaGFyQXQiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwibmV3RGF0ZSIsImdldFRpbWUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJxdWV1ZUVudHJpZXMiLCJpdGVtRWxlbSIsImVudHJ5IiwiUXVldWVFbnRyeSIsImlzTWUiLCJlbWFpbCIsInNldE15UmVxdWVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJvbGROdW1FbnRyaWVzIiwicmVtb3ZlUmVxdWVzdCIsInJlcXVlc3QiLCJkaXNhYmxlUmVmcmVzaCIsIm9uUmVtb3ZlIiwiYWx3YXlzIiwic2V0VGltZW91dCIsImVuYWJsZVJlZnJlc2giLCJjYW5jZWxJbmNvbWluZ1JlZnJlc2giLCJjbGVhckxpc3QiLCJzbGlkZVVwIiwic2lnblVwIiwiZGVzY3JpcHRpb24iLCJtYXBYIiwibWFwWSIsInNob3dFcnJvck1lc3NhZ2UiLCJ1cGRhdGVSZXF1ZXN0Iiwib2xkQWRtaW4iLCJ1cGRhdGVHcm91cHMiLCJmb3JtRGF0YSIsImNhY2hlIiwiY29udGVudFR5cGUiLCJwcm9jZXNzRGF0YSIsInVwZGF0ZUNvbmZpZ3VyYXRpb24iLCJvcHRpb25zIiwiZm9ybUhhc0NoYW5nZXMiLCJyZWd1bGFyRm9ybUVsZW0iLCJjb250YWluZXJFbGVtIiwic2lnblVwRm9ybSIsInNpZ25VcE5hbWVJbnB1dCIsInNpZ25VcERlc2NyaXB0aW9uSW5wdXQiLCJzaWduVXBMb2NhdGlvbklucHV0Iiwib24iLCJmb3JtQ2hhbmdlZCIsImNzcyIsIm1hcEhvbGRlciIsInNpZ25VcE1hcCIsInNpZ25VcFBpbiIsInBpbiIsInNlbGZfMSIsInRydW5jIiwicGFnZVgiLCJvZmZzZXQiLCJsZWZ0Iiwid2lkdGgiLCJwYWdlWSIsInRvcCIsImhlaWdodCIsInZhbCIsInN1Ym1pdCIsInByZXZlbnREZWZhdWx0Iiwic2lnblVwTmFtZSIsInNpZ25VcERlc2NyaXB0aW9uIiwic2lnblVwTG9jYXRpb24iLCJ1cGRhdGVSZXF1ZXN0QnV0dG9ucyIsIlVQREFURV9SRVFVRVNUX0JVVFRPTl9VUF9UT19EQVRFIiwic2lnblVwQnV0dG9ucyIsIlVQREFURV9SRVFVRVNUX0JVVFRPTl9VUERBVEUiLCJyZWZyZXNoU2lnbkluRW5hYmxlZCIsImlzRW5hYmxlZCIsImlzVW1pY2giLCJxdWV1ZVJlZnJlc2hlZCIsIm15UmVxdWVzdFNldCIsInJlcSIsIl9fZGVjb3JhdGUiLCJjbGVhclF1ZXVlQnV0dG9uIiwib3BlblNjaGVkdWxlRGlhbG9nQnV0dG9uIiwib3Blbk1hbmFnZVF1ZXVlRGlhbG9nQnV0dG9uIiwiaW5mb0VsZW0iLCJuYW1lRWxlbSIsImxvY2F0aW9uRWxlbSIsImRlc2NyaXB0aW9uRWxlbSIsInRpbWVXYWl0aW5nIiwibWludXRlc1dhaXRpbmciLCJyb3VuZCIsInRzRWxlbSIsInJlbW92ZUJ1dHRvbiIsInNlbmRNZXNzYWdlQnV0dG9uIiwicGFyc2VGbG9hdCIsIm1hcEVsZW0iLCJtYXBQaW4iLCJyZW1vdmUiLCJTY2hlZHVsZSIsImRpYWxvZyIsInVwZGF0ZSIsInNjaGVkdWxlUGlja2VyIiwiZmlyc3RSb3ciLCJ1bml0RWxlbXMiLCJkYXlMZXR0ZXJzIiwiZGF5Iiwicm93RWxlbSIsInVuaXRFbGVtIiwicHJlc3NlZCIsImNoYW5nZUNvbG9yIiwiY3VycmVudFR5cGUiLCJuZXh0VHlwZSIsInNlcXVlbmNlIiwiYXEiLCJtYXAiLCJqb2luIiwiTWFuYWdlUXVldWVEaWFsb2ciLCJncm91cHNGb3JtIiwiRm9ybURhdGEiLCJ1cGRhdGVDb25maWd1cmF0aW9uQnV0dG9uIiwiY2hhbmdlIiwidW5zYXZlZENoYW5nZXMiLCJjaGFuZ2VzVXBUb0RhdGUiLCJwcmV2ZW50VW5yZWdpc3RlcmVkIiwiaXMiLCJwcmV2ZW50R3JvdXBzIiwicHJpb3JpdGl6ZU5ldyIsImRvbmUiLCJQT0xJQ0lFU19VTlNBVkVEIiwiUE9MSUNJRVNfVVBfVE9fREFURSIsInNpZ25JbiIsIm5ld1VzZXIiLCJBdXRoZW50aWNhdGVkVXNlciIsImFjY291bnRNZXNzYWdlRWxlbSIsImdhcGkiLCJhdXRoMiIsImdldEF1dGhJbnN0YW5jZSIsImRpc2Nvbm5lY3QiLCJ0aGVuIiwic2lnbk91dCIsInRoZVVzZXIiLCJvblNpZ25PdXQiLCJVbmF1dGhlbnRpY2F0ZWRVc2VyIiwiVXNlckJhc2UiLCJvbkZpbmlzaFNpZ25pbmdJbiIsIl9zdXBlciIsImFkbWlucyIsIl9pZFRva2VuIiwiY2hlY2tBZG1pbiIsIl9fZXh0ZW5kcyIsInNldEludGVydmFsIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInhociIsInRleHRTdGF0dXMiLCJxdWV1ZV8xIiwib25TaWduSW4iLCJnb29nbGVVc2VyIiwicHJvZmlsZSIsImdldEJhc2ljUHJvZmlsZSIsImdldEVtYWlsIiwiZ2V0QXV0aFJlc3BvbnNlIiwiaWRfdG9rZW4iLCJyZWFkeSIsImNsZWFySW5wdXQiLCJjbGVhclRoZVF1ZXVlRGlhbG9nIiwiZm9jdXMiLCJzaWduVXBEaWFsb2ciLCJzZW5kTWVzc2FnZURpYWxvZyIsImNvbnRlbnQiLCJzZXR1cERpYWxvZ3MiLCJzaWduaW4yIiwicmVuZGVyIiwic2NvcGUiLCJsb25ndGl0bGUiLCJ0aGVtZSIsIm9uc3VjY2VzcyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBD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QnlHLEVBQWtCekgsR0FBRyxpQkFBa0IsV0FDbkNqSyxFQUFFL0UsTUFBTTBFLEtBQUssZUFBZTZSLFVBSVZ4UixFQUFFLG9CQUNSa0wsT0FBTyxTQUFTOVEsR0FDNUJBLEVBQUUrUSxpQkFDRixJQUFJd0csRUFBMkIzUixFQUFFLHVCQUF1QmlMLE1BRXhELE9BQUswRyxHQUE2QixHQUFsQkEsRUFBUXZjLFFBS3hCeWIsRUFBQXZSLGlCQUFpQlMsU0FBUzRDLFlBQVlnUCxHQUV0Q0QsRUFBa0JsUCxNQUFNLFNBQ2pCLElBUEhvQixNQUFNLG9DQUNDLEtBVWYsSUFBSWlOLEVBQUExRCxTQUFTbk4sRUFBRSxvQkFFZixJQUFJNlEsRUFBQXhDLGtCQVVKdUQsR0FTQXJDLEtBQUtzQyxRQUFRQyxPQUFPLHNCQUNoQkMsTUFBUyxnQkFDVGxILE1BQVMsSUFDVEcsT0FBVSxHQUNWZ0gsV0FBYSxFQUNiQyxNQUFTLE9BQ1RDLFVBQWFwQixNQUlyQnZQLFFBQVFDLElBQUkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUwKTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuIiwidmFyIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvSW50ZWdlcjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgIH1cbiAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsYW1wO1xuIiwidmFyIGJhc2VDbGFtcCA9IHJlcXVpcmUoJy4vX2Jhc2VDbGFtcCcpLFxuICAgIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgPyBsZW5ndGhcbiAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbmRzV2l0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG4iLCJ2YXIgYmFzZVByb3BlcnR5T2YgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlPZicpO1xuXG4vKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xudmFyIGh0bWxFc2NhcGVzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuXG4vKipcbiAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gKi9cbnZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVIdG1sQ2hhcjtcbiIsInZhciBlc2NhcGVIdG1sQ2hhciA9IHJlcXVpcmUoJy4vX2VzY2FwZUh0bWxDaGFyJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gKlxuICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAqXG4gKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAqIFhTUyB2ZWN0b3JzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUluZGV4T2ZXaXRoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmljdEluZGV4T2Y7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hTjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaW5kSW5kZXg7XG4iLCJ2YXIgYmFzZUZpbmRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VGaW5kSW5kZXgnKSxcbiAgICBiYXNlSXNOYU4gPSByZXF1aXJlKCcuL19iYXNlSXNOYU4nKSxcbiAgICBzdHJpY3RJbmRleE9mID0gcmVxdWlyZSgnLi9fc3RyaWN0SW5kZXhPZicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJbmRleE9mO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyksXG4gICAgYmFzZUluZGV4T2ZXaXRoID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2ZXaXRoJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIHNlZW4gPSBhcnJheTtcblxuICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICB9XG4gIGlmIChpdGVyYXRlZSkge1xuICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHVsbEFsbDtcbiIsInZhciBiYXNlUHVsbEFsbCA9IHJlcXVpcmUoJy4vX2Jhc2VQdWxsQWxsJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gKlxuICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAqIC8vID0+IFsnYicsICdiJ11cbiAqL1xuZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICA6IGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHB1bGxBbGw7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iLCJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVzdDtcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgcHVsbEFsbCA9IHJlcXVpcmUoJy4vcHVsbEFsbCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICpcbiAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWydiJywgJ2InXVxuICovXG52YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHB1bGw7XG4iLCJcclxuaW1wb3J0IHB1bGwgZnJvbSBcImxvZGFzaC9wdWxsXCI7XHJcblxyXG5pbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xyXG4gICAgZGF0YToge307XHJcbiAgICBzb3VyY2U6IGFueTtcclxufVxyXG5cclxuXHJcbi8vIGludGVyZmFjZSBPYnNlcnZhYmxlVHlwZSB7XHJcbi8vICAgICBzZW5kKGNhdGVnb3J5OiBzdHJpbmcsIGRhdGE6IGFueSkgOiB2b2lkO1xyXG4vLyAgICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE9ic2VydmVyVHlwZSwgY2F0ZWdvcnk/OiBzdHJpbmcgfCBzdHJpbmdbXSkgOiBPYnNlcnZhYmxlVHlwZTtcclxuLy8gICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nKSA6IE9ic2VydmFibGVUeXBlO1xyXG4vLyAgICAgaWRlbnRpZnkoY2F0ZWdvcnk6IHN0cmluZywgZnVuYzogKG86T2JzZXJ2ZXJUeXBlKSA9PiBhbnkpIDogT2JzZXJ2ZXJUeXBlO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkTGlzdGVuZXIob2JqV2l0aE9ic2VydmFibGU6IHtvYnNlcnZhYmxlOiBPYnNlcnZhYmxlfSwgbGlzdGVuZXI6IE9ic2VydmVyVHlwZSwgY2F0ZWdvcnk/OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgb2JqV2l0aE9ic2VydmFibGUub2JzZXJ2YWJsZS5hZGRMaXN0ZW5lcihsaXN0ZW5lciwgY2F0ZWdvcnkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZVJlc3BvbnNlKG1lc3NhZ2VDYXRlZ29yeT86IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQuX2FjdCkgeyB0YXJnZXQuX2FjdCA9IHt9OyB9XHJcbiAgICAgICAgdGFyZ2V0Ll9hY3RbbWVzc2FnZUNhdGVnb3J5IHx8IHByb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VSZXNwb25zZXMge1xyXG4gICAgW2luZGV4OiBzdHJpbmddOiAoKG1zZzogTWVzc2FnZSkgPT4gdm9pZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZXJUeXBlIHtcclxuICAgIF9hY3QgOiBNZXNzYWdlUmVzcG9uc2VzO1xyXG59XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgT2JzZXJ2ZXIge1xyXG4vLyAgICAgcHJpdmF0ZSByZWFkb25seSBhY3RvcjogQWN0b3I7XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IoYWN0b3I6IEFjdG9yKSB7XHJcbi8vICAgICAgICAgdGhpcy5hY3RvciA9IGFjdG9yO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBfSURFTlRJRlkobXNnIDoge2RhdGE6KG86YW55KSA9PiB2b2lkfSkge1xyXG4vLyAgICAgICAgIG1zZy5kYXRhKHRoaXMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBsaXN0ZW5UbyhvdGhlcjogT2JzZXJ2YWJsZVR5cGUsIGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuLy8gICAgICAgICBvdGhlci5hZGRMaXN0ZW5lcih0aGlzLCBjYXRlZ29yeSk7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHN0b3BMaXN0ZW5pbmdUbyhvdGhlcjogT2JzZXJ2YWJsZVR5cGUsIGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuLy8gICAgICAgICBpZiAob3RoZXIpIHtcclxuLy8gICAgICAgICAgICAgb3RoZXIucmVtb3ZlTGlzdGVuZXIodGhpcywgY2F0ZWdvcnkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gdGhpcztcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcmVjdiAobXNnIDogTWVzc2FnZSkge1xyXG5cclxuLy8gICAgICAgICAvLyBDYWxsIHRoZSBcIl9hY3RcIiBmdW5jdGlvbiBmb3IgdGhpc1xyXG4vLyAgICAgICAgIHZhciBjYXRBY3QgPSB0aGlzLmFjdG9yLl9hY3RbbXNnLmNhdGVnb3J5XTtcclxuLy8gICAgICAgICBpZiAoY2F0QWN0KXtcclxuLy8gICAgICAgICAgICAgY2F0QWN0LmNhbGwodGhpcy5hY3RvciwgbXNnKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rvci5fYWN0Ll9kZWZhdWx0KSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWN0b3IuX2FjdC5fZGVmYXVsdC5jYWxsKHRoaXMuYWN0b3IsIG1zZyk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICBhc3NlcnQoZmFsc2UpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlKG9ic2VydmVyOiBPYnNlcnZlclR5cGUsIG1zZzogTWVzc2FnZSkge1xyXG4gICAgdmFyIGNhdEFjdCA9IG9ic2VydmVyLl9hY3RbbXNnLmNhdGVnb3J5XTtcclxuICAgIGlmIChjYXRBY3Qpe1xyXG4gICAgICAgIGNhdEFjdC5jYWxsKG9ic2VydmVyLCBtc2cpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAob2JzZXJ2ZXIuX2FjdC5fZGVmYXVsdCkge1xyXG4gICAgICAgIG9ic2VydmVyLl9hY3QuX2RlZmF1bHQuY2FsbChvYnNlcnZlciwgbXNnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFzc2VydChmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlIHtcclxuICAgIHByaXZhdGUgc2lsZW50ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHVuaXZlcnNhbE9ic2VydmVyczogT2JzZXJ2ZXJUeXBlW10gPSBbXTtcclxuICAgIHByaXZhdGUgb2JzZXJ2ZXJzOiB7W2luZGV4OiBzdHJpbmddIDogT2JzZXJ2ZXJUeXBlW119ID0ge307XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzb3VyY2U6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IGFueSkge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZW5kKGNhdGVnb3J5OiBzdHJpbmcsIGRhdGE/OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zaWxlbnQpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBtc2c6IE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc1ttc2cuY2F0ZWdvcnldO1xyXG4gICAgICAgIGlmIChvYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYnNlcnZlcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVNZXNzYWdlKG9ic2VydmVyc1tpXSwgbXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnVuaXZlcnNhbE9ic2VydmVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICByZWNlaXZlTWVzc2FnZSh0aGlzLnVuaXZlcnNhbE9ic2VydmVyc1tpXSwgbXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZExpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2F0ZWdvcnkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFuIGFycmF5IG9mIGNhdGVnb3JpZXMsIGFkZCB0byBhbGwgaW5kaXZpZHVhbGx5XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhdGVnb3J5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcihsaXN0ZW5lciwgY2F0ZWdvcnlbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9ic2VydmVyc1tjYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyc1tjYXRlZ29yeV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzW2NhdGVnb3J5XS5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJBZGRlZChsaXN0ZW5lciwgY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIC8vIGlmIG5vIGNhdGVnb3J5LCBpbnRlbnQgaXMgdG8gbGlzdGVuIHRvIGV2ZXJ5dGhpbmdcclxuICAgICAgICAgICAgdGhpcy51bml2ZXJzYWxPYnNlcnZlcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJBZGRlZChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgTm90ZTogdG8gcmVtb3ZlIGEgdW5pdmVyc2FsIGxpc3RlbmVyLCB5b3UgbXVzdCBjYWxsIHRoaXMgd2l0aCBjYXRlZ29yeT09ZmFsc2UuXHJcbiAgICBJZiBhIGxpc3RlbmVyIGlzIHVuaXZlcnNhbCwgcmVtb3ZpbmcgaXQgZnJvbSBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkgd29uJ3QgZG8gYW55dGhpbmcuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gdGhlIGxpc3QgZm9yIGEgc3BlY2lmaWMgY2F0ZWdvcnkgKGlmIGxpc3QgZXhpc3RzKVxyXG4gICAgICAgICAgICBsZXQgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnNbY2F0ZWdvcnldO1xyXG4gICAgICAgICAgICBvYnNlcnZlcnMgJiYgcHVsbChvYnNlcnZlcnMsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lclJlbW92ZWQobGlzdGVuZXIsIGNhdGVnb3J5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gYWxsIGNhdGVnb3JpZXNcclxuICAgICAgICAgICAgZm9yKHZhciBjYXQgaW4gdGhpcy5vYnNlcnZlcnMpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lciwgY2F0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWxzbyByZW1vdmUgZnJvbSB1bml2ZXJzYWwgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIHB1bGwodGhpcy51bml2ZXJzYWxPYnNlcnZlcnMsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lclJlbW92ZWQobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbGlzdGVuZXJBZGRlZChsaXN0ZW5lcjogT2JzZXJ2ZXJUeXBlLCBjYXRlZ29yeT86IHN0cmluZykgOiB2b2lkIHsgfVxyXG4gICAgcHJvdGVjdGVkIGxpc3RlbmVyUmVtb3ZlZChsaXN0ZW5lcjogT2JzZXJ2ZXJUeXBlLCBjYXRlZ29yeT86IHN0cmluZykgOiB2b2lkIHsgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBpZGVudGlmeShjYXRlZ29yeTogc3RyaW5nLCBmdW5jOiAobzpPYnNlcnZlclR5cGUpID0+IGFueSkge1xyXG4gICAgLy8gICAgIGxldCBvdGhlciEgOiBPYnNlcnZlclR5cGU7IC8vIFVzZXMgZGVmaW5pdGUgYXNzaWdubWVudCBhbm5vdGF0aW9uIHNpbmNlIHRoZSBmdW5jdGlvbiBpcyBhc3N1bWVkIHRvIGFzc2lnbiB0byBvdGhlclxyXG4gICAgLy8gICAgIHRoaXMuc2VuZChjYXRlZ29yeSwgZnVuYyB8fCBmdW5jdGlvbihvOk9ic2VydmVyVHlwZSkge290aGVyID0gbzt9KTtcclxuICAgIC8vICAgICByZXR1cm4gb3RoZXI7XHJcbiAgICAvLyB9XHJcblxyXG59XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEphbWVzIEp1ZXR0IG9uIDkvNS8yMDE2LlxyXG4gKi9cclxuXHJcbi8vIGltcG9ydCBcIi4vdXRpbC91dGlsLmpzXCJcclxuZnVuY3Rpb24gZGVidWcobWVzc2FnZTogc3RyaW5nLCBjYXRlZ29yeTogc3RyaW5nKSB7XHJcbiAgICBpZiAoY2F0ZWdvcnkpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGNhdGVnb3J5ICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgJChcIi5kZWJ1Zy5cIitjYXRlZ29yeSkuaHRtbChcIlwiK21lc3NhZ2UpOyAvL1wiXCIrIGlzIHRvIGZvcmNlIGNvbnZlcnNpb24gdG8gc3RyaW5nICh2aWEgLnRvU3RyaW5nIGlmIG9iamVjdClcclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgICAgJChcIi5kZWJ1Zy5kZWJ1Z0FsbFwiKS5odG1sKFwiXCIrbWVzc2FnZSk7IC8vXCJcIisgaXMgdG8gZm9yY2UgY29udmVyc2lvbiB0byBzdHJpbmcgKHZpYSAudG9TdHJpbmcgaWYgb2JqZWN0KVxyXG4gICAgfVxyXG59XHJcblxyXG52YXIgYXNzZXJ0ID0gZnVuY3Rpb24oY29uZGl0aW9uOiBhbnksIG1lc3NhZ2UgPSBcIlwiKSB7XHJcbiAgICBpZiAoIWNvbmRpdGlvbilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIkFzc2VydCBmYWlsZWQ6IFwiICsgbWVzc2FnZSk7XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgQXJyYXk8VD4ge1xyXG4gICAgY2xlYXIoKSA6IHZvaWQ7XHJcbn0gXHJcbkFycmF5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMubGVuZ3RoID0gMDtcclxufVxyXG5cclxuaW1wb3J0IHtPYnNlcnZhYmxlLCBNZXNzYWdlUmVzcG9uc2VzLCBtZXNzYWdlUmVzcG9uc2V9IGZyb20gXCIuL3V0aWwvbWl4aW5zXCI7XHJcbmltcG9ydCBlc2NhcGUgZnJvbSBcImxvZGFzaC9lc2NhcGVcIlxyXG5pbXBvcnQgZW5kc1dpdGggZnJvbSBcImxvZGFzaC9lbmRzV2l0aFwiXHJcblxyXG52YXIgQU5JTUFUSU9OX0RFTEFZID0gNTAwO1xyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXVlQXBwbGljYXRpb24ge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX25hbWUgPSBcIlF1ZXVlQXBwbGljYXRpb25cIjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGluc3RhbmNlIDogUXVldWVBcHBsaWNhdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUluc3RhbmNlKGVsZW06IEpRdWVyeSkge1xyXG4gICAgICAgICg8UXVldWVBcHBsaWNhdGlvbj5RdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlKSA9IG5ldyBRdWV1ZUFwcGxpY2F0aW9uKGVsZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZWxlbSA6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgY291cnNlUGlsbHMgOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIGNvdXJzZVBhbmVzIDogSlF1ZXJ5O1xyXG5cclxuICAgIHByaXZhdGUgY291cnNlcyA6IENvdXJzZVtdID0gW107XHJcbiAgICBwcml2YXRlIF9hY3RpdmVRdWV1ZT8gOiBRdWV1ZTtcclxuXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VzU2hvd24gOiB7W2luZGV4OnN0cmluZ106IGJvb2xlYW59ID0ge307XHJcbiAgICBwcml2YXRlIHNlbmRNZXNzYWdlUG9zdElkPzogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUodGhpcyk7XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihlbGVtIDogSlF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcclxuICAgICAgICB0aGlzLmNvdXJzZVBpbGxzID0gZWxlbS5maW5kKFwiLmNvdXJzZVBpbGxzXCIpO1xyXG4gICAgICAgIHRoaXMuY291cnNlUGFuZXMgPSBlbGVtLmZpbmQoXCIuY291cnNlUGFuZXNcIik7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZENvdXJzZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgbG9hZENvdXJzZXMoKSB7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBsZXQgbGlzdCA9IGF3YWl0ICQuZ2V0SlNPTihcImFwaS9jb3Vyc2VMaXN0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ291cnNlc0xvYWQobGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgb29wcyhlLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ291cnNlc0xvYWQobGlzdCA6IHtbaW5kZXg6c3RyaW5nXTogc3RyaW5nfVtdKSB7XHJcbiAgICAgICAgdGhpcy5jb3Vyc2VQaWxscy5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuY291cnNlUGFuZXMuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLmNvdXJzZXMuY2xlYXIoKTtcclxuXHJcblxyXG4gICAgICAgIC8vIE5vIGFjdGl2ZSBjb3Vyc2UgaW5pdGlhbGx5XHJcbiAgICAgICAgdGhpcy5jb3Vyc2VQYW5lcy5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cInRhYi1wYW5lIGZhZGUgaW4gYWN0aXZlXCI+PGgxPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1sZWZ0XCI+PC9zcGFuPiBQbGVhc2Ugc2VsZWN0IGEgY291cnNlLjwvaDE+PC9kaXY+JykpO1xyXG5cclxuICAgICAgICBsaXN0LmZvckVhY2goKGNvdXJzZURhdGEpID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIEVzY2FwZSBldmVyeXRoaW5nXHJcbiAgICAgICAgICAgIC8vIFRPRE8gcmVkdW5kYW50IC0gdGhpcyBoYXBwZW5zIG9uIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvdXJzZURhdGEpe1xyXG4gICAgICAgICAgICAgICAgY291cnNlRGF0YVtrZXldID0gZXNjYXBlKGNvdXJzZURhdGFba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb3Vyc2VJZCA9IGNvdXJzZURhdGFbXCJjb3Vyc2VJZFwiXTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcGlsbCB1c2VkIHRvIHNlbGVjdCB0aGUgY291cnNlXHJcbiAgICAgICAgICAgIGxldCBwaWxsRWxlbSA9ICQoJzxsaT48YSBocmVmPVwiIycgKyBjb3Vyc2VJZCArICdcIiBkYXRhLXRvZ2dsZT1cInBpbGxcIj48aDM+JyArIGNvdXJzZUlkICsgJzwvaDM+PC9hPjwvbGk+Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuY291cnNlUGlsbHMuYXBwZW5kKHBpbGxFbGVtKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgY29udGFpbiB0aGUgY291cnNlIGNvbnRlbnRcclxuICAgICAgICAgICAgbGV0IGNvdXJzZUVsZW0gPSAkKCc8ZGl2IGlkPVwiJyArIGNvdXJzZUlkICsgJ1wiIGNsYXNzPVwidGFiLXBhbmUgZmFkZVwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICB0aGlzLmNvdXJzZVBhbmVzLmFwcGVuZChjb3Vyc2VFbGVtKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgY291cnNlIGl0c2VsZlxyXG4gICAgICAgICAgICBsZXQgY291cnNlID0gbmV3IENvdXJzZShjb3Vyc2VEYXRhLCBjb3Vyc2VFbGVtKTtcclxuICAgICAgICAgICAgdGhpcy5jb3Vyc2VzLnB1c2goY291cnNlKTtcclxuXHJcbiAgICAgICAgICAgIHBpbGxFbGVtLmZpbmQoXCJhXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb3Vyc2UubWFrZUFjdGl2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0QWN0aXZlUXVldWUocXVldWUgOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9hY3RpdmVRdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBhY3RpdmUgcXVldWUgdG8gXCIgKyBxdWV1ZS5xdWV1ZUlkKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNpZ25VcEZvcm0oKTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImFjdGl2ZVF1ZXVlU2V0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY3RpdmVRdWV1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlUXVldWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVNpZ25VcEZvcm0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVF1ZXVlICYmIHRoaXMuX2FjdGl2ZVF1ZXVlLmhhc01hcCgpKSB7XHJcbiAgICAgICAgICAgICQoXCIjc2lnblVwTWFwSG9sZGVyXCIpLnNob3coKTtcclxuICAgICAgICAgICAgJChcIiNzaWduVXBNYXBNZXNzYWdlXCIpLnNob3coKTtcclxuICAgICAgICAgICAgJChcIiNzaWduVXBNYXBJbWFnZVwiKS5hdHRyKFwic3JjXCIsIHRoaXMuX2FjdGl2ZVF1ZXVlLm1hcEltYWdlU3JjKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICQoXCIjc2lnblVwTWFwSG9sZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgJChcIiNzaWduVXBNYXBNZXNzYWdlXCIpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVzZXJTaWduZWRJbigpIHtcclxuICAgICAgICB0aGlzLmNvdXJzZXMuZm9yRWFjaCgoY291cnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvdXJzZS51c2VyU2lnbmVkSW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVmcmVzaEFjdGl2ZVF1ZXVlKCkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZVF1ZXVlICYmIHRoaXMuX2FjdGl2ZVF1ZXVlLnJlZnJlc2goKTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1lc3NhZ2UobWVzc2FnZToge1tpbmRleDpzdHJpbmddOiBzdHJpbmd9KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1lc3NhZ2VzU2hvd25bbWVzc2FnZS5pZF0pe1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzU2hvd25bbWVzc2FnZS5pZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAkKFwiI21lc3NhZ2VEaWFsb2dIZWFkZXJcIikuaHRtbCgnTWVzc2FnZScpO1xyXG4gICAgICAgICAgICAkKFwiI21lc3NhZ2VEaWFsb2dDb250ZW50XCIpLmFwcGVuZCgnPHA+PHNwYW4gY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+JyAgKyBtZXNzYWdlW1wic2VuZGVyXCJdICsgJzwvc3Bhbj4gJyArIG1lc3NhZ2VbXCJtZXNzYWdlXCJdICsgJzwvcD4nKTtcclxuICAgICAgICAgICAgJChcIiNtZXNzYWdlRGlhbG9nXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlbmRNZXNzYWdlUG9zdElkKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlUG9zdElkID0gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlbmRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL3NlbmRNZXNzYWdlXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGlkdG9rZW46IFVzZXIuaWRUb2tlbigpLFxyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuc2VuZE1lc3NhZ2VQb3N0SWQsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZnJlc2hDb250ZW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVRdWV1ZSkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuX2FjdGl2ZVF1ZXVlLmNvdXJzZS5zaG9ydE5hbWUgKyBcIiBPSCAoXCIgKyB0aGlzLl9hY3RpdmVRdWV1ZS5udW1FbnRyaWVzICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBub3RpZnkodGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgIGlmICghTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgICAgYWxlcnQobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy8gVE9ETzogYnVnIGluIHR5cGVzY3JpcHQgcmVxdWlyZXMgY2FzdCBiZWxvdy4gQ2FuIGJlIHJlbW92ZWQgZXZlbnR1YWxseS5cclxuICAgICAgICBpZiAoKDxhbnk+Tm90aWZpY2F0aW9uKS5wZXJtaXNzaW9uICE9PSBcImdyYW50ZWRcIikge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgbmV3IE5vdGlmaWNhdGlvbih0aXRsZSwge1xyXG4gICAgICAgICAgICBib2R5OiBtZXNzYWdlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQ291cnNlIHtcclxuICAgIHB1YmxpYyByZWFkb25seSBjb3Vyc2VJZCA6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSBzaG9ydE5hbWUgOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnVsbE5hbWUgOiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBpc0FkbWluIDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBxdWV1ZXMgOiBhbnlbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVRdWV1ZSA6IGFueTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW0gOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHF1ZXVlUGlsbHNFbGVtIDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwaWNrQVF1ZXVlRWxlbSA6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFpbkVsZW0gOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHF1ZXVlUGFuZXNFbGVtIDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250ZW50RWxlbSA6IEpRdWVyeTtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoZGF0YToge1tpbmRleDpzdHJpbmddOiBzdHJpbmd9LCBlbGVtOiBKUXVlcnkpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jb3Vyc2VJZCA9IGRhdGFbXCJjb3Vyc2VJZFwiXTtcclxuICAgICAgICB0aGlzLnNob3J0TmFtZSA9IGRhdGFbXCJzaG9ydE5hbWVcIl07XHJcbiAgICAgICAgdGhpcy5mdWxsTmFtZSA9IGRhdGFbXCJmdWxsTmFtZVwiXTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWV1ZVBpbGxzRWxlbSA9ICQoJzx1bCBjbGFzcz1cInF1ZXVlUGlsbHMgbmF2IG5hdi1waWxsc1wiPjwvdWw+Jyk7XHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZCh0aGlzLnF1ZXVlUGlsbHNFbGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5waWNrQVF1ZXVlRWxlbSA9ICQoJzxkaXY+PC9kaXY+Jyk7XHJcbiAgICAgICAgdGhpcy5waWNrQVF1ZXVlRWxlbS5hcHBlbmQoJCgnPGgzPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy11cFwiPjwvc3Bhbj4gU2V2ZXJhbCBxdWV1ZXMgYXJlIGF2YWlsYWJsZSBmb3IgJyArIHRoaXMuc2hvcnROYW1lICsgJy4gUGxlYXNlIHNlbGVjdCBvbmUuPC9oMz4nKSk7XHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZCh0aGlzLnBpY2tBUXVldWVFbGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYWluRWxlbSA9ICQoJzxkaXY+PC9kaXY+Jyk7XHJcbiAgICAgICAgdGhpcy5tYWluRWxlbS5oaWRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMucXVldWVQYW5lc0VsZW0gPSAkKCc8ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC0xMiBxdWV1ZVBhbmVzIHRhYi1jb250ZW50XCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgdGhpcy5tYWluRWxlbS5hcHBlbmQodGhpcy5xdWV1ZVBhbmVzRWxlbSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGVudEVsZW0gPSAkKCc8ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC0xMlwiPjwvZGl2PicpO1xyXG4gICAgICAgIHRoaXMubWFpbkVsZW0uYXBwZW5kKHRoaXMuY29udGVudEVsZW0pO1xyXG5cclxuICAgICAgICB0aGlzLmVsZW0uYXBwZW5kKHRoaXMubWFpbkVsZW0pO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWRDb250ZW50KCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUXVldWVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1ha2VBY3RpdmUoKSB7XHJcbiAgICAgICAgLy8gRG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBpbiBwYXJ0aWN1bGFyIGZvciB0aGUgY291cnNlIGl0c2VsZixcclxuICAgICAgICAvLyBidXQgd2UgZG8gbmVlZCB0byBtYWtlIHN1cmUgdGhlIGFjdGl2ZSBxdWV1ZSB3aXRoaW4gdGhpcyBjb3Vyc2VcclxuICAgICAgICAvLyBpcyB0aGUgYWN0aXZlIHF1ZXVlIG92ZXJhbGwgc2luY2UgaXQgd2lsbCBiZSBzaG93bi5cclxuICAgICAgICB0aGlzLmFjdGl2ZVF1ZXVlICYmIHRoaXMuYWN0aXZlUXVldWUubWFrZUFjdGl2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbG9hZENvbnRlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWxlbS5sb2FkKFwicXVldWUtY29tcG9uZW50L2NvdXJzZUNvbnRlbnQvXCIgKyB0aGlzLmNvdXJzZUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGxvYWRRdWV1ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJhcGkvcXVldWVMaXN0L1wiICsgdGhpcy5jb3Vyc2VJZCxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblF1ZXVlc0xvYWQoZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblF1ZXVlc0xvYWQobGlzdCA6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZXMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLnF1ZXVlUGlsbHNFbGVtLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVBhbmVzRWxlbS5lbXB0eSgpO1xyXG5cclxuICAgICAgICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBpdGVtW1wibmFtZVwiXTtcclxuICAgICAgICAgICAgdmFyIHF1ZXVlSWQgPSBpdGVtW1wicXVldWVJZFwiXTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBwaWxscyBmb3IgZWFjaCBxdWV1ZSBiZWxvbmdpbmcgdG8gdGhpcyBjb3Vyc2VcclxuICAgICAgICAgICAgdmFyIHBpbGxFbGVtID0gJCgnPGxpPjxhIGRhdGEtdG9nZ2xlPVwicGlsbFwiPjxoNj4nICsgbmFtZSArICc8L2g2PjwvYT48L2xpPicpO1xyXG4gICAgICAgICAgICBwaWxsRWxlbS5maW5kKFwiYVwiKS5wcm9wKFwiaHJlZlwiLCBcIiNxdWV1ZVwiICsgcXVldWVJZCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVQaWxsc0VsZW0uYXBwZW5kKHBpbGxFbGVtKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBwYW5lcyB0byBob2xkIHRoZSBxdWV1ZVxyXG4gICAgICAgICAgICB2YXIgcXVldWVFbGVtID0gJCgnPGRpdiBpZD1cInF1ZXVlJyArIHF1ZXVlSWQgKyAnXCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgIHF1ZXVlRWxlbS5hZGRDbGFzcyhcInRhYi1wYW5lIGZhZGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVQYW5lc0VsZW0uYXBwZW5kKHF1ZXVlRWxlbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHF1ZXVlIG9iamVjdHMgdGhlbXNlbHZlc1xyXG4gICAgICAgICAgICB2YXIgcXVldWUgPSBuZXcgUXVldWUoaXRlbSwgdGhpcywgcXVldWVFbGVtKTtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZXMucHVzaChxdWV1ZSk7XHJcblxyXG4gICAgICAgICAgICBxdWV1ZS5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgICAgICBwaWxsRWxlbS5maW5kKFwiYVwiKS5jbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tBUXVldWVFbGVtLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVF1ZXVlID0gcXVldWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5FbGVtLnNob3coKTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlLm1ha2VBY3RpdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBJZiBvbmx5IG9uZSBxdWV1ZSwgc2VsZWN0IGl0IGF1dG9tYXRpY2FsbHlcclxuICAgICAgICAvLyAocGlsbEVsZW0gYW5kIHF1ZXVlRWxlbSBhcmUgc3RpbGwgaW4gc2NvcGUgZXZlbiBhZnRlciB0aGUgbG9vcCBib2R5KVxyXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZVBpbGxzRWxlbS5jaGlsZHJlbigpLmZpcnN0KCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVQYW5lc0VsZW0uY2hpbGRyZW4oKS5maXJzdCgpLmFkZENsYXNzKFwiaW4gYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVF1ZXVlID0gdGhpcy5xdWV1ZXNbMF07XHJcbiAgICAgICAgICAgIHRoaXMucGlja0FRdWV1ZUVsZW0uaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5FbGVtLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5waWNrQVF1ZXVlRWxlbS5zaG93KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbkVsZW0uaGlkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRBZG1pbihVc2VyLmlzQ291cnNlQWRtaW4odGhpcy5jb3Vyc2VJZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRBZG1pbihpc0FkbWluIDogYm9vbGVhbil7XHJcbiAgICAgICAgdGhpcy5pc0FkbWluID0gaXNBZG1pbjtcclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWV1ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZXNbaV0uc2V0QWRtaW4oaXNBZG1pbilcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBZG1pbikge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW0uYWRkQ2xhc3MoXCJhZG1pblwiKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtLnJlbW92ZUNsYXNzKFwibm90QWRtaW5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbS5hZGRDbGFzcyhcIm5vdEFkbWluXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW0ucmVtb3ZlQ2xhc3MoXCJhZG1pblwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVzZXJTaWduZWRJbigpe1xyXG4gICAgICAgIHRoaXMuc2V0QWRtaW4oVXNlci5pc0NvdXJzZUFkbWluKHRoaXMuY291cnNlSWQpKTtcclxuICAgICAgICB0aGlzLnF1ZXVlcy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXVlKXtcclxuICAgICAgICAgICAgcXVldWUudXNlclNpZ25lZEluKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIFF1ZXVlIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9uYW1lOiBcIlF1ZXVlXCI7XHJcbiAgICBcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjb3Vyc2U6IENvdXJzZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcXVldWVJZDogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvY2F0aW9uOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpc0FkbWluOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbnVtRW50cmllczogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyByZWFkb25seSBsYXN0UmVmcmVzaDogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNPcGVuOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbXlSZXF1ZXN0OiBRdWV1ZUVudHJ5IHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWFwSW1hZ2VTcmM6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG51bUVudHJpZXNFbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxhc3RSZWZyZXNoRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0dXNNZXNzYWdlRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhbm5vdW5jZW1lbnRDb250YWluZXJFbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFubm91bmNlbWVudE1lc3NhZ2VFbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFkbWluU3RhdHVzRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhZG1pbkNvbnRyb2xzRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHVkZW50Q29udHJvbHNFbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHF1ZXVlRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGFja0VsZW06IEpRdWVyeTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFkbWluQ29udHJvbHM6IEFkbWluQ29udHJvbHM7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0dWRlbnRDb250cm9sczogU3R1ZGVudENvbnRyb2xzO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIHJlZnJlc2hEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50UmVmcmVzaEluZGV4ID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiB7W2luZGV4OnN0cmluZ106IGFueX0sIGNvdXJzZTogQ291cnNlLCBlbGVtOiBKUXVlcnkpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jb3Vyc2UgPSBjb3Vyc2U7XHJcblxyXG4gICAgICAgIHRoaXMucXVldWVJZCA9IGRhdGFbXCJxdWV1ZUlkXCJdO1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBkYXRhW1wibG9jYXRpb25cIl07XHJcbiAgICAgICAgdGhpcy5tYXBJbWFnZVNyYyA9IGRhdGFbXCJtYXBcIl0gPyBkYXRhW1wibWFwXCJdIDogXCJcIjtcclxuICAgICAgICB0aGlzLm5hbWUgPSBkYXRhW1wibmFtZVwiXTtcclxuICAgICAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgICAgICB0aGlzLmlzQWRtaW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm51bUVudHJpZXMgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJlZnJlc2hJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5sYXN0UmVmcmVzaCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hEaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgc3RhdHVzRWxlbSA9ICQoJzxwPjwvcD4nKS5hcHBlbmRUbyh0aGlzLmVsZW0pO1xyXG4gICAgICAgIHN0YXR1c0VsZW0uYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8c3BhbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIk51bWJlciBvZiBTdHVkZW50c1wiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZHVjYXRpb25cIj48L3NwYW4+PC9zcGFuPicpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiIFwiKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLm51bUVudHJpZXNFbGVtID0gJCgnPHNwYW4+PC9zcGFuPicpKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3RhdHVzRWxlbS5hcHBlbmQoJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOycpO1xyXG4gICAgICAgIHN0YXR1c0VsZW0uYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8c3BhbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIkxhc3QgUmVmcmVzaFwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZWZyZXNoXCI+PC9zcGFuPjwvc3Bhbj4nKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcIiBcIilcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQodGhpcy5sYXN0UmVmcmVzaEVsZW0gPSAkKCc8c3Bhbj48L3NwYW4+JykpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdGF0dXNFbGVtLmFwcGVuZCgnJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdHVzTWVzc2FnZUVsZW0gPSAkKCc8c3Bhbj5Mb2FkaW5nIHF1ZXVlIGluZm9ybWF0aW9uLi4uPC9zcGFuPicpO1xyXG4gICAgICAgIHN0YXR1c0VsZW0uYXBwZW5kKHRoaXMuc3RhdHVzTWVzc2FnZUVsZW0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkbWluU3RhdHVzRWxlbSA9ICQoJzxzcGFuIGNsYXNzPVwiYWRtaW5Pbmx5XCI+PGI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7WW91IGFyZSBhbiBhZG1pbiBmb3IgdGhpcyBxdWV1ZS48L2I+PC9zcGFuPicpO1xyXG4gICAgICAgIHN0YXR1c0VsZW0uYXBwZW5kKHRoaXMuYWRtaW5TdGF0dXNFbGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5hbm5vdW5jZW1lbnRDb250YWluZXJFbGVtID0gJCgnPGRpdiBjbGFzcyA9IFwicGFuZWwgcGFuZWwtaW5mb1wiPjwvZGl2PicpLmFwcGVuZFRvKHRoaXMuZWxlbSk7XHJcbiAgICAgICAgdGhpcy5hbm5vdW5jZW1lbnRDb250YWluZXJFbGVtLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInBhbmVsLWJvZHkgYmctaW5mb1wiPjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tYnVsbGhvcm5cIj48L3NwYW4+ICcpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuYW5ub3VuY2VtZW50TWVzc2FnZUVsZW0gPSAkKCc8c3Ryb25nPjwvc3Ryb25nPicpKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRtaW5Db250cm9sc0VsZW0gPSAkKCc8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdCBhZG1pbk9ubHlcIj48ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPjwvZGl2PjwvZGl2PicpXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLmVsZW0pXHJcbiAgICAgICAgICAgIC5maW5kKFwiLnBhbmVsLWJvZHlcIik7XHJcblxyXG4gICAgICAgIHRoaXMuYWRtaW5Db250cm9scyA9IG5ldyBBZG1pbkNvbnRyb2xzKHRoaXMsIHRoaXMuYWRtaW5Db250cm9sc0VsZW0pO1xyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2YWJsZS5hZGRMaXN0ZW5lcih0aGlzLmFkbWluQ29udHJvbHMpOyAvLyBBZG1pbkNvbnRyb2xzIGN1cnJlbnRseSBub3QgYW4gT2JzZXJ2ZXJcclxuXHJcbiAgICAgICAgdGhpcy5zdHVkZW50Q29udHJvbHNFbGVtID0gJCgnPGRpdiBjbGFzcz1cInBhbmVsIHBhbmVsLWRlZmF1bHRcIj48ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPjwvZGl2PjwvZGl2PicpXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLmVsZW0pXHJcbiAgICAgICAgICAgIC5maW5kKFwiLnBhbmVsLWJvZHlcIik7XHJcblxyXG4gICAgICAgIHRoaXMuc3R1ZGVudENvbnRyb2xzID0gbmV3IFN0dWRlbnRDb250cm9scyh0aGlzLCB0aGlzLnN0dWRlbnRDb250cm9sc0VsZW0pO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5hZGRMaXN0ZW5lcih0aGlzLnN0dWRlbnRDb250cm9scyk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IGlzIHRoaXMgb2xkP1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmhhc01hcCgpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWRtaW5Db250cm9sc0VsZW0uYXBwZW5kKCc8cCBjbGFzcz1cImFkbWluT25seVwiPkNsaWNrIHRoZSBcIkxvY2F0ZVwiIGJ1dHRvbiBvbiBhIHN0dWRlbnRcXCdzIHJlcXVlc3QgdG8gdXBkYXRlIHRoZSBtYXAuPC9wPicpO1xyXG4gICAgICAgIC8vICAgICB2YXIgbWFwSG9sZGVyID0gJCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTsgbWFyZ2luLXRvcDogMTBweDtcIj48L2Rpdj4nKTtcclxuICAgICAgICAvLyAgICAgdGhpcy5tYXBFbGVtID0gJCgnPGltZyBjbGFzcz1cImFkbWluT25seSBxdWV1ZS1zdGFmZk1hcFwiIHNyYz1cImltZy8nICsgdGhpcy5tYXBJbWFnZVNyYyArICdcIj48L2ltZz4nKTtcclxuICAgICAgICAvLyAgICAgbWFwSG9sZGVyLmFwcGVuZCh0aGlzLm1hcEVsZW0pO1xyXG4gICAgICAgIC8vICAgICB0aGlzLm1hcFBpbiA9ICQoJzxzcGFuIGNsYXNzPVwiYWRtaW5Pbmx5IHF1ZXVlLWxvY2F0ZVBpblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tYXAtbWFya2VyXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgbGVmdDotMS4zY2g7dG9wOi0wLjk1ZW07XCI+PC9zcGFuPjwvc3Bhbj4nKTtcclxuICAgICAgICAvLyAgICAgbWFwSG9sZGVyLmFwcGVuZCh0aGlzLm1hcFBpbik7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWRtaW5Db250cm9sc0VsZW0uYXBwZW5kKG1hcEhvbGRlcik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLnF1ZXVlRWxlbSA9ICQoJzxkaXY+PC9kaXY+JykuYXBwZW5kVG8odGhpcy5lbGVtKTtcclxuXHQgICAgdGhpcy5zdGFja0VsZW0gPSAkKCc8ZGl2IGNsYXNzPVwiYWRtaW5Pbmx5XCI+PC9kaXY+JykuYXBwZW5kVG8odGhpcy5lbGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XHJcblxyXG4gICAgICAgIHRoaXMudXNlclNpZ25lZEluKCk7IC8vIFRPRE8gY2hhbmdlIG5hbWUgdG8gdXBkYXRlVXNlcj9cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWFrZUFjdGl2ZU9uQ2xpY2soZWxlbSA6IEpRdWVyeSkge1xyXG4gICAgICAgIGVsZW0uY2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1ha2VBY3RpdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWFrZUFjdGl2ZSgpIHtcclxuICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLnNldEFjdGl2ZVF1ZXVlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWZyZXNoKCkge1xyXG5cclxuICAgICAgICAvLyBteVJlZnJlc2hJbmRleCBpcyBjYXB0dXJlZCBpbiBhIGNsb3N1cmUgd2l0aCB0aGUgY2FsbGJhY2suXHJcbiAgICAgICAgLy8gaWYgcmVmcmVzaCBoYWQgYmVlbiBjYWxsZWQgYWdhaW4sIHRoZSBpbmRleCB3b24ndCBtYXRjaCBhbmRcclxuICAgICAgICAvLyB3ZSBkb24ndCBkbyBhbnl0aGluZy4gdGhpcyBwcmV2ZW50cyB0aGUgc2l0dWF0aW9uIHdoZXJlIHNvbWVvbmVcclxuICAgICAgICAvLyBzaWducyB1cCBidXQgdGhlbiBhIHBlbmRpbmcgcmVxdWVzdCBmcm9tIGJlZm9yZSB0aGV5IGRpZCBzbyBmaW5pc2hlc1xyXG4gICAgICAgIC8vIGFuZCBjYXVzZXMgaXQgdG8gbG9vayBsaWtlIHRoZXkgd2VyZSBpbW1lZGlhdGVseSByZW1vdmVkLiB0aGlzIGFsc29cclxuICAgICAgICAvLyBmaXhlcyBhIHNpbWlsYXIgcHJvYmxlbSB3aGVuIGFuIGFkbWluIHJlbW92ZXMgc29tZW9uZSBidXQgdGhlbiBhXHJcbiAgICAgICAgLy8gcGVuZGluZyByZWZyZXNoIG1ha2VzIHRoZW0gcG9wIGJhY2sgdXAgdGVtcG9yYXJpbHkuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmVmcmVzaEluZGV4ICs9IDE7XHJcbiAgICAgICAgdmFyIG15UmVmcmVzaEluZGV4ID0gdGhpcy5jdXJyZW50UmVmcmVzaEluZGV4O1xyXG5cclxuICAgICAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJhcGkvbGlzdFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZUlkOiB0aGlzLnF1ZXVlSWRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgYW5vdGhlciByZWZyZXNoIGhhcyBiZWVuIHJlcXVlc3RlZCwgaWdub3JlIHRoZSByZXN1bHRzIG9mIHRoaXMgb25lXHJcbiAgICAgICAgICAgICAgICBpZiAobXlSZWZyZXNoSW5kZXggPT09IHRoaXMuY3VycmVudFJlZnJlc2hJbmRleCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoUmVzcG9uc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZnJlc2hSZXNwb25zZShkYXRhIDoge1tpbmRleDogc3RyaW5nXTogYW55fSkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5yZWZyZXNoRGlzYWJsZWQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1lc3NhZ2UgZm9yIGluZGl2aWR1YWwgdXNlclxyXG4gICAgICAgIGlmIChkYXRhW1wibWVzc2FnZVwiXSkge1xyXG4gICAgICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLm1lc3NhZ2UoZGF0YVtcIm1lc3NhZ2VcIl0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQW5ub3VuY2VtZW50IGZvciB0aGlzIHF1ZXVlIGFzIGEgd2hvbGVcclxuICAgICAgICBpZiAoZGF0YVtcImFubm91bmNlbWVudFwiXSkge1xyXG4gICAgICAgICAgICB0aGlzLmFubm91bmNlbWVudE1lc3NhZ2VFbGVtLmh0bWwoZGF0YVtcImFubm91bmNlbWVudFwiXSk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ub3VuY2VtZW50Q29udGFpbmVyRWxlbS5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFubm91bmNlbWVudENvbnRhaW5lckVsZW0uaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFubm91bmNlbWVudE1lc3NhZ2VFbGVtLmh0bWwoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAoPGJvb2xlYW4+dGhpcy5pc09wZW4pID0gZGF0YVtcImlzT3BlblwiXTtcclxuICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXNNZXNzYWdlRWxlbS5odG1sKFwiVGhlIHF1ZXVlIGlzIG9wZW4uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHNjaGVkdWxlID0gZGF0YVtcInNjaGVkdWxlXCJdO1xyXG4gICAgICAgICAgICBsZXQgaGFsZkhvdXIgPSBkYXRhW1wiaGFsZkhvdXJcIl07XHJcbiAgICAgICAgICAgIGxldCBuZXh0T3BlbiA9IC0xO1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSBoYWxmSG91cjsgaSA8IDQ4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzY2hlZHVsZVR5cGUgPSBzY2hlZHVsZS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NoZWR1bGVUeXBlID09PSBcIm9cIiB8fCBzY2hlZHVsZVR5cGUgPT09IFwicFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE9wZW4gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobmV4dE9wZW4gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c01lc3NhZ2VFbGVtLmh0bWwoXCJUaGUgcXVldWUgaXMgY2xvc2VkIGZvciB0b2RheS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBkLnNldEhvdXJzKDApO1xyXG4gICAgICAgICAgICAgICAgZC5zZXRNaW51dGVzKDApO1xyXG4gICAgICAgICAgICAgICAgZC5zZXRTZWNvbmRzKDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBuZXdEYXRlID0gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyBuZXh0T3BlbiozMCo2MDAwMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c01lc3NhZ2VFbGVtLmh0bWwoXCJUaGUgcXVldWUgaXMgY2xvc2VkIHJpZ2h0IG5vdy4gSXQgd2lsbCBvcGVuIGF0IFwiICsgbmV3RGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKSArIFwiLlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHF1ZXVlID0gZGF0YVtcInF1ZXVlXCJdO1xyXG4gICAgICAgIHRoaXMucXVldWVFbGVtLmVtcHR5KCk7XHJcbiAgICAgICAgbGV0IHF1ZXVlRW50cmllcyA9IFtdO1xyXG4gICAgICAgIGxldCBteVJlcXVlc3QgOiAoUXVldWVFbnRyeSB8IG51bGwpID0gbnVsbDtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBxdWV1ZVtpXTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpdGVtRWxlbSA9ICQoXCI8bGkgY2xhc3M9J2xpc3QtZ3JvdXAtaXRlbSc+PC9saT5cIik7XHJcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IG5ldyBRdWV1ZUVudHJ5KHRoaXMsIGl0ZW0sIGksIGl0ZW1FbGVtKTtcclxuICAgICAgICAgICAgcXVldWVFbnRyaWVzLnB1c2goZW50cnkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFteVJlcXVlc3QgJiYgVXNlci5pc01lKGVudHJ5LmVtYWlsKSkge1xyXG4gICAgICAgICAgICAgICAgbXlSZXF1ZXN0ID0gZW50cnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucXVldWVFbGVtLmFwcGVuZChpdGVtRWxlbSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldE15UmVxdWVzdChteVJlcXVlc3QpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJxdWV1ZVJlZnJlc2hlZFwiKTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZGF0YVtcInN0YWNrXCJdLCBudWxsLCA0KSk7XHJcbiAgICAgICAgdGhpcy5zdGFja0VsZW0uaHRtbChcIjxoMz5UaGUgU3RhY2s8L2gzPjxiciAvPjxwPk1vc3QgcmVjZW50bHkgcmVtb3ZlZCBhdCB0b3A8L3A+PHByZT5cIiArIEpTT04uc3RyaW5naWZ5KGRhdGFbXCJzdGFja1wiXSwgbnVsbCwgNCkgKyBcIjwvcHJlPlwiKTtcclxuXHJcblxyXG4gICAgICAgIHZhciBvbGROdW1FbnRyaWVzID0gdGhpcy5udW1FbnRyaWVzO1xyXG4gICAgICAgICg8bnVtYmVyPnRoaXMubnVtRW50cmllcykgPSBxdWV1ZS5sZW5ndGg7XHJcbiAgICAgICAgaWYodGhpcy5pc0FkbWluICYmIG9sZE51bUVudHJpZXMgPT09IDAgJiYgdGhpcy5udW1FbnRyaWVzID4gMCkge1xyXG4gICAgICAgICAgUXVldWVBcHBsaWNhdGlvbi5pbnN0YW5jZS5ub3RpZnkoXCJSZXF1ZXN0IFJlY2VpdmVkIVwiLCBxdWV1ZUVudHJpZXNbMF0ubmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAoPERhdGU+dGhpcy5sYXN0UmVmcmVzaCkgPSBuZXcgRGF0ZSgpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5udW1FbnRyaWVzRWxlbS5odG1sKFwiXCIrdGhpcy5udW1FbnRyaWVzKTtcclxuICAgICAgICB0aGlzLmxhc3RSZWZyZXNoRWxlbS5odG1sKHRoaXMubGFzdFJlZnJlc2gudG9Mb2NhbGVUaW1lU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRNeVJlcXVlc3QobXlSZXF1ZXN0OiBRdWV1ZUVudHJ5IHwgbnVsbCkge1xyXG4gICAgICAgICg8UXVldWVFbnRyeSB8IG51bGw+dGhpcy5teVJlcXVlc3QpID0gbXlSZXF1ZXN0O1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwibXlSZXF1ZXN0U2V0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVSZXF1ZXN0KHJlcXVlc3Q6IFF1ZXVlRW50cnkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImF0dGVtcHRpbmcgdG8gcmVtb3ZlIFwiICsgcmVxdWVzdC5lbWFpbCArIFwiIGZyb20gcXVldWUgXCIgKyB0aGlzLnF1ZXVlSWQpO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZVJlZnJlc2goKTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJhcGkvcmVtb3ZlXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0LmlkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc2Z1bGx5IHJlbW92ZWQgXCIgKyByZXF1ZXN0LmVtYWlsICsgXCIgZnJvbSBxdWV1ZSBcIiArIHNlbGYucXVldWVJZCk7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uUmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuZW5hYmxlUmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIH0sIEFOSU1BVElPTl9ERUxBWSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2FuY2VsSW5jb21pbmdSZWZyZXNoKCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRSZWZyZXNoSW5kZXggKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzYWJsZVJlZnJlc2goKSB7XHJcbiAgICAgIHRoaXMucmVmcmVzaERpc2FibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5hYmxlUmVmcmVzaCgpIHtcclxuICAgICAgdGhpcy5yZWZyZXNoRGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL2NsZWFyXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGlkdG9rZW46IFVzZXIuaWRUb2tlbigpLFxyXG4gICAgICAgICAgICAgICAgcXVldWVJZDogdGhpcy5xdWV1ZUlkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6ICgpID0+IHsgdGhpcy5jbGVhckxpc3QoKSB9LFxyXG4gICAgICAgICAgICBlcnJvcjogb29wc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXJMaXN0KCkge1xyXG4gICAgICAgIHRoaXMucXVldWVFbGVtLmNoaWxkcmVuKCkuc2xpZGVVcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaWduVXAobmFtZTogc3RyaW5nLCBsb2NhdGlvbjogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBtYXBYPzogbnVtYmVyLCBtYXBZPzogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL3NpZ25VcFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBpZHRva2VuOiBVc2VyLmlkVG9rZW4oKSxcclxuICAgICAgICAgICAgICAgIHF1ZXVlSWQ6IHRoaXMucXVldWVJZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICBtYXBYOiBtYXBYLFxyXG4gICAgICAgICAgICAgICAgbWFwWTogbWFwWSxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtcImZhaWxcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlKGRhdGFbXCJyZWFzb25cIl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVJlcXVlc3QobmFtZTogc3RyaW5nLCBsb2NhdGlvbjogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBtYXBYPzogbnVtYmVyLCBtYXBZPzogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL3VwZGF0ZVJlcXVlc3RcIixcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMubXlSZXF1ZXN0IS5pZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICBtYXBYOiBtYXBYLFxyXG4gICAgICAgICAgICAgICAgbWFwWTogbWFwWSxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtcImZhaWxcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlKGRhdGFbXCJyZWFzb25cIl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEFkbWluKGlzQWRtaW46IGJvb2xlYW4pIHtcclxuICAgICAgICB2YXIgb2xkQWRtaW4gPSB0aGlzLmlzQWRtaW47XHJcbiAgICAgICAgKDxib29sZWFuPnRoaXMuaXNBZG1pbikgPSBpc0FkbWluO1xyXG5cclxuICAgICAgICAvLyBJZiBvdXIgcHJpdmlsZWdlcyBjaGFuZ2UsIGhpdCB0aGUgc2VydmVyIGZvciBhcHByb3ByaWF0ZSBkYXRhLFxyXG4gICAgICAgIC8vIGJlY2F1c2UgaXQgZ2l2ZXMgb3V0IGRpZmZlcmVudCB0aGluZ3MgZm9yIG5vcm1hbCB2cy4gYWRtaW5cclxuICAgICAgICBpZiAob2xkQWRtaW4gIT0gdGhpcy5pc0FkbWluKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVzZXJTaWduZWRJbigpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInVzZXJTaWduZWRJblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGFzTWFwKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcEltYWdlU3JjICE9PSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVHcm91cHMoZm9ybURhdGE6IEZvcm1EYXRhKSB7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwicXVldWVJZFwiLCB0aGlzLnF1ZXVlSWQpO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL3VwZGF0ZUdyb3Vwc1wiLFxyXG4gICAgICAgICAgICBjYWNoZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcclxuICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhWydzdWNjZXNzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcImdyb3VwcyB1cGxvYWRlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcImVycm9yIHVwbG9hZGluZyBncm91cHMuIHJvc3RlciBhbmQgZ3JvdXBzIGhhdmUgYmVlbiBjbGVhcmVkIC0geW91J2xsIGhhdmUgdG8gdXBsb2FkIHRoZW0gYWdhaW4sIHNvcnJ5IVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICAgICAvLyBpZiBhbm90aGVyIHJlZnJlc2ggaGFzIGJlZW4gcmVxdWVzdGVkLCBpZ25vcmUgdGhlIHJlc3VsdHMgb2YgdGhpcyBvbmVcclxuICAgICAgICAgICAgICAgIC8vICAgICBpZiAobXlSZWZyZXNoSW5kZXggPT09IHNlbGYuY3VycmVudFJlZnJlc2hJbmRleCl7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHNlbGYucmVmcmVzaFJlc3BvbnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJlcnJvciB1cGxvYWRpbmcgZ3JvdXBzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVDb25maWd1cmF0aW9uKG9wdGlvbnM6IHtbaW5kZXg6IHN0cmluZ106IHN0cmluZzt9KSB7XHJcbiAgICAgICAgb3B0aW9ucy5xdWV1ZUlkID0gdGhpcy5xdWV1ZUlkO1xyXG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgdXJsOiBcImFwaS91cGRhdGVRdWV1ZUNvbmZpZ3VyYXRpb25cIixcclxuICAgICAgICAgICAgZGF0YTogb3B0aW9ucyxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbXCJmYWlsXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShkYXRhW1wicmVhc29uXCJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IG9vcHNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgU3R1ZGVudENvbnRyb2xzIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9uYW1lID0gXCJTdHVkZW50Q29udHJvbHNcIjtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBVUERBVEVfUkVRVUVTVF9CVVRUT05fVVBfVE9fREFURSA9IFwiPHNwYW4gY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tb2snPjwvc3Bhbj4gUmVxdWVzdCBVcGRhdGVkXCI7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBVUERBVEVfUkVRVUVTVF9CVVRUT05fVVBEQVRFID0gXCJVcGRhdGUgUmVxdWVzdFwiO1xyXG5cclxuICAgIHByaXZhdGUgcXVldWU6IFF1ZXVlO1xyXG5cclxuICAgIHByaXZhdGUgZm9ybUhhc0NoYW5nZXM6IGJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBlbGVtOiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHN0YXR1c0VsZW06IEpRdWVyeTtcclxuICAgIHByaXZhdGUgc2lnblVwRm9ybTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBzaWduVXBOYW1lSW5wdXQ6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgc2lnblVwRGVzY3JpcHRpb25JbnB1dDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBzaWduVXBMb2NhdGlvbklucHV0OiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIG1hcEhvbGRlcj86IEpRdWVyeTtcclxuICAgIHByaXZhdGUgc2lnblVwTWFwPzogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBzaWduVXBQaW4/OiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIG1hcFg/OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG1hcFk/OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHNpZ25VcEJ1dHRvbnM6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgdXBkYXRlUmVxdWVzdEJ1dHRvbnM6IEpRdWVyeTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgX2FjdCEgOiBNZXNzYWdlUmVzcG9uc2VzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXVlOiBRdWV1ZSwgZWxlbTogSlF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XHJcblxyXG4gICAgICAgIHRoaXMuZm9ybUhhc0NoYW5nZXMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lckVsZW0gPSAkKCc8ZGl2PjwvZGl2PicpO1xyXG5cclxuICAgICAgICBsZXQgcmVndWxhckZvcm1FbGVtO1xyXG4gICAgICAgIHRoaXMuc2lnblVwRm9ybSA9ICQoJzxmb3JtIGlkPVwic2lnblVwRm9ybVwiIHJvbGU9XCJmb3JtXCIgY2xhc3M9XCJmb3JtLWhvcml6b250YWxcIj48L2Zvcm0+JylcclxuICAgICAgICAgICAgLmFwcGVuZChyZWd1bGFyRm9ybUVsZW0gPSAkKCc8ZGl2PjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCc8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsIGNvbC1zbS0zXCIgZm9yPVwic2lnblVwTmFtZScgKyBxdWV1ZS5xdWV1ZUlkICsgJ1wiPk5hbWU6PC9sYWJlbD4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLnNpZ25VcE5hbWVJbnB1dCA9ICQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJzaWduVXBOYW1lJyArIHF1ZXVlLnF1ZXVlSWQgKyAnXCIgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiIG1heGxlbmd0aD1cIjMwXCIgcGxhY2Vob2xkZXI9XCJOaWNlIHRvIG1lZXQgeW91IVwiPicpKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj48L2Rpdj4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJzxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJzaWduVXBEZXNjcmlwdGlvbicgKyBxdWV1ZS5xdWV1ZUlkICsgJ1wiPkRlc2NyaXB0aW9uOjwvbGFiZWw+JylcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJjb2wtc20tOVwiPjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodGhpcy5zaWduVXBEZXNjcmlwdGlvbklucHV0ID0gJCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInNpZ25VcERlc2NyaXB0aW9uJyArIHF1ZXVlLnF1ZXVlSWQgKyAnXCJyZXF1aXJlZD1cInJlcXVpcmVkXCIgbWF4bGVuZ3RoPVwiMTAwXCIgcGxhY2Vob2xkZXI9XCJlLmcuIFNlZ2ZhdWx0IGluIGZ1bmN0aW9uIFgsIHVzaW5nIHRoZSBtYXAgZGF0YSBzdHJ1Y3R1cmUsIGV0Yy5cIj4nKSlcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCc8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsIGNvbC1zbS0zXCIgZm9yPVwic2lnblVwTG9jYXRpb24nICsgcXVldWUucXVldWVJZCArICdcIj5Mb2NhdGlvbjo8L2xhYmVsPicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIj48L2Rpdj4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuc2lnblVwTG9jYXRpb25JbnB1dCA9ICQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJzaWduVXBMb2NhdGlvbicgKyBxdWV1ZS5xdWV1ZUlkICsgJ1wicmVxdWlyZWQ9XCJyZXF1aXJlZFwiIG1heGxlbmd0aD1cIjMwXCIgcGxhY2Vob2xkZXI9XCJlLmcuIENvbXB1dGVyICMzNiwgbGFwdG9wIGJ5IGdsYXNzL2F0cml1bSBkb29yLCBldGMuXCI+JykpXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnPGRpdiBjbGFzcz1cImhpZGRlbi14cyBmb3JtLWdyb3VwXCI+PGRpdiBjbGFzcz1cImNvbC1zbS1vZmZzZXQtMyBjb2wtc20tOVwiPjxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIHF1ZXVlLXNpZ25VcEJ1dHRvblwiPlNpZ24gVXA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3MgcXVldWUtdXBkYXRlUmVxdWVzdEJ1dHRvblwiIHN0eWxlPVwiZGlzcGxheTpub25lO1wiPjwvYnV0dG9uPjwvZGl2PjwvZGl2PicpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsZW0uYXBwZW5kKHRoaXMuc2lnblVwRm9ybSk7XHJcblxyXG5cdHRoaXMuc3RhdHVzRWxlbSA9ICQoXCI8ZGl2PjwvZGl2PlwiKTtcclxuXHRjb250YWluZXJFbGVtLmFwcGVuZCh0aGlzLnN0YXR1c0VsZW0pO1xyXG5cclxuICAgICAgICB0aGlzLnNpZ25VcEZvcm0uZmluZChcImlucHV0XCIpLm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1DaGFuZ2VkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNNYXAoKSkge1xyXG4gICAgICAgICAgICByZWd1bGFyRm9ybUVsZW0uYWRkQ2xhc3MoXCJjb2wteHMtMTIgY29sLXNtLThcIik7XHJcbiAgICAgICAgICAgIHJlZ3VsYXJGb3JtRWxlbS5jc3MoXCJwYWRkaW5nXCIsIFwiMFwiKTtcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBGb3JtLmFwcGVuZCh0aGlzLm1hcEhvbGRlciA9ICQoJzxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTRcIiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTsgcGFkZGluZzowXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQodGhpcy5zaWduVXBNYXAgPSAkKCc8aW1nIHNyYz1cImltZy8nICsgdGhpcy5xdWV1ZS5tYXBJbWFnZVNyYyArICdcIiBjbGFzcz1cInF1ZXVlLXNpZ25VcE1hcFwiIHN0eWxlPVwid2lkdGg6MTAwJVwiPjwvaW1nPicpKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLnNpZ25VcFBpbiA9ICQoJzxzcGFuIGNsYXNzPVwicXVldWUtbG9jYXRlUGluXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW1hcC1tYXJrZXJcIiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyBsZWZ0Oi0xLjNjaDt0b3A6LTAuOTVlbTtcIj48L3NwYW4+PC9zcGFuPicpKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGRpZmZlcmVudCBsYXlvdXQgZm9yIHNpZ24gdXAgYnV0dG9uIG9uIHNtYWxsIHNjcmVlbnNcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBGb3JtLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwidmlzaWJsZS14cyBjb2wteHMtMTJcIiBzdHlsZT1cInBhZGRpbmc6IDA7XCI+PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj48ZGl2IGNsYXNzPVwiY29sLXNtLW9mZnNldC0zIGNvbC1zbS05XCI+PGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3MgcXVldWUtc2lnblVwQnV0dG9uXCI+U2lnbiBVcDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tc3VjY2VzcyBxdWV1ZS11cGRhdGVSZXF1ZXN0QnV0dG9uXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCI+PC9idXR0b24+PC9kaXY+PC9kaXY+PC9kaXY+JykpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBpbiA9IHRoaXMuc2lnblVwUGluO1xyXG4gICAgICAgICAgICB0aGlzLm1hcFggPSA1MDtcclxuICAgICAgICAgICAgdGhpcy5tYXBZID0gNTA7XHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBNYXAuY2xpY2soZnVuY3Rpb24gKGUpIHsgLy9PZmZzZXQgbW91c2UgUG9zaXRpb25cclxuICAgICAgICAgICAgICAgIC8vIFVzZSAhIGZvciBub24tbnVsbCBhc3NlcnRpb25cclxuICAgICAgICAgICAgICAgIHNlbGYubWFwWCA9IDEwMCAqIE1hdGgudHJ1bmMoKGUucGFnZVggLSAkKHRoaXMpLm9mZnNldCgpIS5sZWZ0KSkgLyAkKHRoaXMpLndpZHRoKCkhO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5tYXBZID0gMTAwICogTWF0aC50cnVuYyhlLnBhZ2VZIC0gJCh0aGlzKS5vZmZzZXQoKSEudG9wKSAvICQodGhpcykuaGVpZ2h0KCkhO1xyXG4gICAgICAgICAgICAgICAgLy8gdmFyIHBpbkxlZnQgPSBtYXBYIC0gcGluLndpZHRoKCkvMjtcclxuICAgICAgICAgICAgICAgIC8vIHZhciBwaW5Ub3AgPSBtYXBZIC0gcGluLmhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgcGluLmNzcyhcImxlZnRcIiwgc2VsZi5tYXBYICsgXCIlXCIpO1xyXG4gICAgICAgICAgICAgICAgcGluLmNzcyhcInRvcFwiLCBzZWxmLm1hcFkgKyBcIiVcIik7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmZvcm1DaGFuZ2VkKCk7XHJcbi8vICAgICAgICAgICAgYWxlcnQoXCJ4OlwiICsgbWFwWCArIFwiLCB5OlwiICsgbWFwWSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRGlzYWJsZSByZWd1bGFyIGxvY2F0aW9uIGlucHV0XHJcbiAgICAgICAgICAgIHRoaXMuc2lnblVwTG9jYXRpb25JbnB1dC52YWwoXCJDbGljayBvbiB0aGUgbWFwIVwiKTtcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBMb2NhdGlvbklucHV0LnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2lnblVwRm9ybS5zdWJtaXQoKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgc2lnblVwTmFtZTogc3RyaW5nID0gPHN0cmluZz50aGlzLnNpZ25VcE5hbWVJbnB1dC52YWwoKTtcclxuICAgICAgICAgICAgdmFyIHNpZ25VcERlc2NyaXB0aW9uOiBzdHJpbmcgPSA8c3RyaW5nPnRoaXMuc2lnblVwRGVzY3JpcHRpb25JbnB1dC52YWwoKTtcclxuICAgICAgICAgICAgdmFyIHNpZ25VcExvY2F0aW9uOiBzdHJpbmcgPSA8c3RyaW5nPnRoaXMuc2lnblVwTG9jYXRpb25JbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2lnblVwTmFtZSB8fCBzaWduVXBOYW1lLmxlbmd0aCA9PSAwIHx8XHJcbiAgICAgICAgICAgICAgICAhc2lnblVwTG9jYXRpb24gfHwgc2lnblVwTG9jYXRpb24ubGVuZ3RoID09IDAgfHxcclxuICAgICAgICAgICAgICAgICFzaWduVXBEZXNjcmlwdGlvbiB8fCBzaWduVXBEZXNjcmlwdGlvbi5sZW5ndGggPT0gMCl7XHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlKFwiWW91IG11c3QgZmlsbCBpbiBhbGwgdGhlIGZpZWxkcy5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5xdWV1ZS5teVJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVldWUuc2lnblVwKFxyXG4gICAgICAgICAgICAgICAgICAgIHNpZ25VcE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2lnblVwTG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgc2lnblVwRGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBYLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwWSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnVwZGF0ZVJlcXVlc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgc2lnblVwTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBzaWduVXBMb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBzaWduVXBEZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBZKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9ybUhhc0NoYW5nZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVSZXF1ZXN0QnV0dG9ucy5yZW1vdmVDbGFzcyhcImJ0bi13YXJuaW5nXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJlcXVlc3RCdXR0b25zLmFkZENsYXNzKFwiYnRuLXN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVxdWVzdEJ1dHRvbnMucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJlcXVlc3RCdXR0b25zLmh0bWwoU3R1ZGVudENvbnRyb2xzLlVQREFURV9SRVFVRVNUX0JVVFRPTl9VUF9UT19EQVRFKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNpZ25VcEJ1dHRvbnMgPSB0aGlzLnNpZ25VcEZvcm0uZmluZChcImJ1dHRvbi5xdWV1ZS1zaWduVXBCdXR0b25cIik7XHJcbiAgICAgICAgdGhpcy51cGRhdGVSZXF1ZXN0QnV0dG9ucyA9IHRoaXMuc2lnblVwRm9ybS5maW5kKFwiYnV0dG9uLnF1ZXVlLXVwZGF0ZVJlcXVlc3RCdXR0b25cIilcclxuICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKS5odG1sKFN0dWRlbnRDb250cm9scy5VUERBVEVfUkVRVUVTVF9CVVRUT05fVVBfVE9fREFURSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbS5hcHBlbmQoY29udGFpbmVyRWxlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZvcm1DaGFuZ2VkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlLm15UmVxdWVzdCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1IYXNDaGFuZ2VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVSZXF1ZXN0QnV0dG9ucy5yZW1vdmVDbGFzcyhcImJ0bi1zdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJlcXVlc3RCdXR0b25zLmFkZENsYXNzKFwiYnRuLXdhcm5pbmdcIik7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVxdWVzdEJ1dHRvbnMucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVSZXF1ZXN0QnV0dG9ucy5odG1sKFN0dWRlbnRDb250cm9scy5VUERBVEVfUkVRVUVTVF9CVVRUT05fVVBEQVRFKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZnJlc2hTaWduSW5FbmFibGVkKCkge1xyXG4gICAgICAgIHZhciBpc0VuYWJsZWQgPSBVc2VyLmlzVW1pY2goKSAmJiB0aGlzLnF1ZXVlLmlzT3BlbiAmJiAhdGhpcy5xdWV1ZS5teVJlcXVlc3Q7XHJcbiAgICAgICAgdGhpcy5zaWduVXBCdXR0b25zLnByb3AoXCJkaXNhYmxlZFwiLCAhaXNFbmFibGVkKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucXVldWUubXlSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVxdWVzdEJ1dHRvbnMuc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAbWVzc2FnZVJlc3BvbnNlKClcclxuICAgIHByaXZhdGUgcXVldWVSZWZyZXNoZWQoKSB7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoU2lnbkluRW5hYmxlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZXNzYWdlUmVzcG9uc2UoKVxyXG4gICAgcHJpdmF0ZSB1c2VyU2lnbmVkSW4oKSB7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoU2lnbkluRW5hYmxlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZXNzYWdlUmVzcG9uc2UoKVxyXG4gICAgcHJpdmF0ZSBteVJlcXVlc3RTZXQoKSB7XHJcbiAgICAgICAgdmFyIHJlcSA9IHRoaXMucXVldWUubXlSZXF1ZXN0O1xyXG4gICAgICAgIHRoaXMuc3RhdHVzRWxlbS5odG1sKFwiXCIpO1xyXG4gICAgICAgIGlmIChyZXEgJiYgIXRoaXMuZm9ybUhhc0NoYW5nZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBOYW1lSW5wdXQudmFsKHJlcS5uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5zaWduVXBEZXNjcmlwdGlvbklucHV0LnZhbChyZXEuZGVzY3JpcHRpb24gfHwgXCJcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc2lnblVwTG9jYXRpb25JbnB1dC52YWwocmVxLmxvY2F0aW9uIHx8IFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNNYXAoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBYID0gcmVxLm1hcFg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcFkgPSByZXEubWFwWTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnblVwUGluIS5jc3MoXCJsZWZ0XCIsIHRoaXMubWFwWCArIFwiJVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnblVwUGluIS5jc3MoXCJ0b3BcIiwgdGhpcy5tYXBZICsgXCIlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmNvdXJzZS5zaG9ydE5hbWUgPT0gXCJFRUNTIDI4MFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c0VsZW0uaHRtbChcIkVFQ1MyODA6IFlvdSBhcmUgYXQgcG9zaXRpb24gXCIgKyByZXEuaW5kZXggKyBcIiBpbiB0aGUgcXVldWVcIik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzRWxlbS5odG1sKFwiWW91IGFyZSBhdCBwb3NpdGlvbiBcIiArIHJlcS5pbmRleCArIFwiIGluIHRoZSBxdWV1ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQWRtaW5Db250cm9scyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfbmFtZSA9IFwiQWRtaW5Db250cm9sc1wiO1xyXG5cclxuICAgIHByaXZhdGUgcXVldWU6IGFueTtcclxuICAgIHByaXZhdGUgZWxlbTogSlF1ZXJ5O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXVlOiBhbnksIGVsZW06IEpRdWVyeSkge1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBxdWV1ZTtcclxuICAgICAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgICAgICB0aGlzLmVsZW0uYXBwZW5kKFwiPHA+PGI+QWRtaW4gQ29udHJvbHM8L2I+PC9wPlwiKTtcclxuICAgICAgICB2YXIgY2xlYXJRdWV1ZUJ1dHRvbiA9ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgYWRtaW5Pbmx5XCIgZGF0YS10b2dnbGU9XCJtb2RhbFwiIGRhdGEtdGFyZ2V0PVwiI2NsZWFyVGhlUXVldWVEaWFsb2dcIj5DbGVhciB0aGUgcXVldWU8L2J1dHRvbj4nKTtcclxuICAgICAgICB0aGlzLnF1ZXVlLm1ha2VBY3RpdmVPbkNsaWNrKGNsZWFyUXVldWVCdXR0b24pOyAvLyBUT0RPIEkgZG9uJ3QgdGhpbmsgdGhpcyBpcyBuZWNlc3NhcnkgYW55bW9yZS4gSWYgdGhleSBjYW4gY2xpY2sgaXQsIGl0IHNob3VsZCBiZSBhY3RpdmUuXHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZChjbGVhclF1ZXVlQnV0dG9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZChcIiBcIik7XHJcbiAgICAgICAgdmFyIG9wZW5TY2hlZHVsZURpYWxvZ0J1dHRvbiA9ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGFkbWluT25seVwiIGRhdGEtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLXRhcmdldD1cIiNzY2hlZHVsZURpYWxvZ1wiPlNjaGVkdWxlPC9idXR0b24+Jyk7XHJcbiAgICAgICAgdGhpcy5xdWV1ZS5tYWtlQWN0aXZlT25DbGljayhvcGVuU2NoZWR1bGVEaWFsb2dCdXR0b24pOyAvLyBUT0RPIEkgZG9uJ3QgdGhpbmsgdGhpcyBpcyBuZWNlc3NhcnkgYW55bW9yZS4gSWYgdGhleSBjYW4gY2xpY2sgaXQsIGl0IHNob3VsZCBiZSBhY3RpdmUuXHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZChvcGVuU2NoZWR1bGVEaWFsb2dCdXR0b24pO1xyXG5cclxuICAgICAgICB0aGlzLmVsZW0uYXBwZW5kKFwiIFwiKTtcclxuICAgICAgICB2YXIgb3Blbk1hbmFnZVF1ZXVlRGlhbG9nQnV0dG9uID0gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWluZm8gYWRtaW5Pbmx5XCIgZGF0YS10b2dnbGU9XCJtb2RhbFwiIGRhdGEtdGFyZ2V0PVwiI21hbmFnZVF1ZXVlRGlhbG9nXCI+TWFuYWdlIFF1ZXVlPC9idXR0b24+Jyk7XHJcbiAgICAgICAgdGhpcy5xdWV1ZS5tYWtlQWN0aXZlT25DbGljayhvcGVuTWFuYWdlUXVldWVEaWFsb2dCdXR0b24pOyAvLyBUT0RPIEkgZG9uJ3QgdGhpbmsgdGhpcyBpcyBuZWNlc3NhcnkgYW55bW9yZS4gSWYgdGhleSBjYW4gY2xpY2sgaXQsIGl0IHNob3VsZCBiZSBhY3RpdmUuXHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZChvcGVuTWFuYWdlUXVldWVEaWFsb2dCdXR0b24pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY2xhc3MgUXVldWVFbnRyeSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfbmFtZSA9IFwiUXVldWVFbnRyeVwiO1xyXG5cclxuICAgIHByaXZhdGUgcXVldWU6IGFueTtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW1haWw6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSBpbmRleDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSBpc01lOiBib29sZWFuO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvY2F0aW9uPzogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG1hcFg/OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWFwWT86IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIGVsZW06IEpRdWVyeTtcclxuICAgIHByaXZhdGUgbmFtZUVsZW06IEpRdWVyeTtcclxuICAgIHByaXZhdGUgbG9jYXRpb25FbGVtPzogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBkZXNjcmlwdGlvbkVsZW0/OiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHRzRWxlbTogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBtYXBFbGVtPzogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBtYXBQaW4/OiBKUXVlcnk7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXVlOiBhbnksIGRhdGE6IHtbaW5kZXg6c3RyaW5nXTogc3RyaW5nfSwgaW5kZXg6IG51bWJlciwgZWxlbTogSlF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gZGF0YVtcImlkXCJdO1xyXG4gICAgICAgIHRoaXMuZW1haWwgPSBkYXRhW1wiZW1haWxcIl07XHJcblxyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICB0aGlzLmlzTWUgPSAhIWRhdGFbXCJuYW1lXCJdOyAvLyBpZiBpdCBoYXMgYSBuYW1lIGl0J3MgdGhlbVxyXG5cclxuICAgICAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgICAgICBsZXQgaW5mb0VsZW0gPSAkKCc8ZGl2IGNsYXNzPVwicXVldWUtZW50cnlJbmZvXCI+PC9kaXY+Jyk7XHJcblxyXG4gICAgICAgIGxldCBuYW1lID0gZGF0YVtcIm5hbWVcIl0gPyBkYXRhW1wibmFtZVwiXSArIFwiIChcIiArIGRhdGFbXCJlbWFpbFwiXSArIFwiKVwiIDogXCJBbm9ueW1vdXMgU3R1ZGVudFwiO1xyXG4gICAgICAgIHRoaXMubmFtZUVsZW0gPSAkKCc8cD48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZWR1Y2F0aW9uXCI+PC9zcGFuPjwvcD4nKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiIFwiICsgbmFtZSlcclxuICAgICAgICAgICAgLmFwcGVuZFRvKGluZm9FbGVtKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBkYXRhW1wibmFtZVwiXTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFbXCJsb2NhdGlvblwiXSAmJiBkYXRhW1wibG9jYXRpb25cIl0ubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb25FbGVtID0gJCgnPHA+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW1hcC1tYXJrZXJcIj48L3NwYW4+PC9wPicpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiIFwiICsgZGF0YVtcImxvY2F0aW9uXCJdKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKGluZm9FbGVtKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGRhdGFbXCJsb2NhdGlvblwiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhW1wiZGVzY3JpcHRpb25cIl0gJiYgZGF0YVtcImRlc2NyaXB0aW9uXCJdLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uRWxlbSA9ICQoJzxwPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1xdWVzdGlvbi1zaWduXCI+PC9zcGFuPjwvcD4nKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcIiBcIiArIGRhdGFbXCJkZXNjcmlwdGlvblwiXSlcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhpbmZvRWxlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkYXRhW1wiZGVzY3JpcHRpb25cIl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGltZVdhaXRpbmcgPSBEYXRlLm5vdygpIC0gbmV3IERhdGUocGFyc2VJbnQoZGF0YVtcInRzXCJdKSoxMDAwKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgbGV0IG1pbnV0ZXNXYWl0aW5nID0gTWF0aC5yb3VuZCh0aW1lV2FpdGluZyAvIDEwMDAgLyA2MCk7XHJcbiAgICAgICAgdGhpcy50c0VsZW0gPSAkKCc8cD48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGltZVwiPjwvc3Bhbj48L3A+JylcclxuICAgICAgICAgICAgLmFwcGVuZChcIiBcIiArIG1pbnV0ZXNXYWl0aW5nICsgXCIgbWluXCIpXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbyhpbmZvRWxlbSk7XHJcblxyXG4gICAgICAgIGxldCByZW1vdmVCdXR0b24gPSAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+UmVtb3ZlPC9idXR0b24+Jyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzTWUpe1xyXG4gICAgICAgICAgICByZW1vdmVCdXR0b24uYWRkQ2xhc3MoXCJhZG1pbk9ubHlcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW1vdmVCdXR0b24ub24oXCJjbGlja1wiLCB0aGlzLnF1ZXVlLnJlbW92ZVJlcXVlc3QuYmluZCh0aGlzLnF1ZXVlLCB0aGlzKSk7XHJcbiAgICAgICAgaW5mb0VsZW0uYXBwZW5kKHJlbW92ZUJ1dHRvbik7XHJcblxyXG4gICAgICAgIGluZm9FbGVtLmFwcGVuZChcIiBcIik7XHJcblxyXG5cclxuICAgICAgICBsZXQgc2VuZE1lc3NhZ2VCdXR0b24gPSAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4td2FybmluZyBhZG1pbk9ubHlcIj5NZXNzYWdlPC9idXR0b24+Jyk7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbmRNZXNzYWdlQnV0dG9uLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbGV0IHNlbmRNZXNzYWdlRGlhbG9nID0gJChcIiNzZW5kTWVzc2FnZURpYWxvZ1wiKTtcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2VEaWFsb2cubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLnNldFNlbmRNZXNzYWdlUG9zdElkKHNlbGYuaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGluZm9FbGVtLmFwcGVuZChzZW5kTWVzc2FnZUJ1dHRvbik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYodGhpcy5xdWV1ZS5oYXNNYXAoKSAmJiBkYXRhW1wibWFwWFwiXSAhPT0gdW5kZWZpbmVkICYmIGRhdGFbXCJtYXBZXCJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGV0IG1hcFggPSB0aGlzLm1hcFggPSBwYXJzZUZsb2F0KGRhdGFbXCJtYXBYXCJdKTtcclxuICAgICAgICAgICAgbGV0IG1hcFkgPSB0aGlzLm1hcFkgPSBwYXJzZUZsb2F0KGRhdGFbXCJtYXBZXCJdKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBtYXBFbGVtID0gJCgnPGRpdiBjbGFzcz1cImFkbWluT25seVwiIHN0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7IHZlcnRpY2FsLWFsaWduOiB0b3A7IHdpZHRoOiAyNSU7IG1hcmdpbi1yaWdodDogMTBweFwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW0uYXBwZW5kKG1hcEVsZW0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1hcEhvbGRlciA9ICQoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmVcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBFbGVtID0gJCgnPGltZyBjbGFzcz1cImFkbWluT25seSBxdWV1ZS1lbnRyeU1hcFwiIHNyYz1cImltZy8nICsgdGhpcy5xdWV1ZS5tYXBJbWFnZVNyYyArICdcIj48L2ltZz4nKTtcclxuICAgICAgICAgICAgbWFwSG9sZGVyLmFwcGVuZCh0aGlzLm1hcEVsZW0pO1xyXG4gICAgICAgICAgICB0aGlzLm1hcFBpbiA9ICQoJzxzcGFuIGNsYXNzPVwiYWRtaW5Pbmx5IHF1ZXVlLWxvY2F0ZVBpblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tYXAtbWFya2VyXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgbGVmdDotMS4zY2g7dG9wOi0wLjk1ZW07XCI+PC9zcGFuPjwvc3Bhbj4nKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBQaW4uY3NzKFwibGVmdFwiLCBtYXBYICsgXCIlXCIpO1xyXG4gICAgICAgICAgICB0aGlzLm1hcFBpbi5jc3MoXCJ0b3BcIiwgbWFwWSArIFwiJVwiKTtcclxuICAgICAgICAgICAgbWFwSG9sZGVyLmFwcGVuZCh0aGlzLm1hcFBpbik7XHJcbiAgICAgICAgICAgIG1hcEVsZW0uYXBwZW5kKG1hcEhvbGRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBsZXQgZGlic0J1dHRvbiA9ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGFkbWluT25seVwiPkRpYnMhPC9idXR0b24+Jyk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbS5hcHBlbmQoZGlic0J1dHRvbik7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbS5hcHBlbmQoXCIgXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbGVtLmFwcGVuZChpbmZvRWxlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uUmVtb3ZlKCkge1xyXG4gICAgICAgIC8vIHRoaXMuc2VuZChcInJlbW92ZWRcIik7XHJcbiAgICAgICAgdGhpcy5lbGVtLnNsaWRlVXAoQU5JTUFUSU9OX0RFTEFZLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfbmFtZTogXCJTY2hlZHVsZVwiO1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHNlcXVlbmNlID0ge1xyXG4gICAgICAgIFwib1wiOiBcImNcIixcclxuICAgICAgICBcImNcIjogXCJwXCIsXHJcbiAgICAgICAgXCJwXCI6IFwib1wiXHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdW5pdEVsZW1zIDogSlF1ZXJ5W11bXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtIDogSlF1ZXJ5KSB7XHJcbiAgICAgICAgbGV0IGRpYWxvZyA9ICQoXCIjc2NoZWR1bGVEaWFsb2dcIik7XHJcblxyXG4gICAgICAgICQoXCIjc2NoZWR1bGVGb3JtXCIpLnN1Ym1pdCgoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgZGlhbG9nLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkaWFsb2cub24oJ3Nob3duLmJzLm1vZGFsJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHVwIHRhYmxlIGluIHNjaGVkdWxlIHBpY2tlclxyXG4gICAgICAgIGxldCBzY2hlZHVsZVBpY2tlciA9ICQoXCIjc2NoZWR1bGVQaWNrZXJcIik7XHJcblxyXG4gICAgICAgIC8vIEZpcnN0IHJvdyBvZiB0YWJsZSB3aXRoIHRpbWUgaGVhZGVyc1xyXG4gICAgICAgIGxldCBmaXJzdFJvdyA9ICQoXCI8dHI+PC90cj5cIikuYXBwZW5kVG8oc2NoZWR1bGVQaWNrZXIpO1xyXG5cclxuICAgICAgICAvLyBFeHRyYSBibGFuayBpbiBmaXJzdCByb3cgdG8gY29ycmVzcG9uZCB0byByb3cgbGFiZWxzIGluIG90aGVyIHJvd3NcclxuICAgICAgICBmaXJzdFJvdy5hcHBlbmQoJzx0ZCBzdHlsZT1cIndpZHRoOjFlbTsgcGFkZGluZy1yaWdodDogM3B4O1wiPjwvdGQ+Jyk7XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCAyNDsgKytpKSB7XHJcbiAgICAgICAgICAgIGZpcnN0Um93LmFwcGVuZCgnPHRkIGNvbHNwYW49XCIyXCI+JyArIChpID09PSAwIHx8IGkgPT09IDEyID8gMTIgOiBpICUgMTIpICsgJzwvdGQ+Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVuaXRFbGVtcyA9IFtdO1xyXG4gICAgICAgIGxldCBkYXlMZXR0ZXJzID0gW1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXTtcclxuICAgICAgICBmb3IodmFyIHIgPSAwOyByIDwgNzsgKytyKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXkgOiBKUXVlcnlbXSA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgcm93RWxlbSA9ICQoJzx0cj48L3RyPicpO1xyXG4gICAgICAgICAgICByb3dFbGVtLmFwcGVuZCgnPHRkIHN0eWxlPVwid2lkdGg6MWVtOyB0ZXh0LWFsaWduOiByaWdodDsgcGFkZGluZy1yaWdodDogM3B4O1wiPicgKyBkYXlMZXR0ZXJzW3JdICsgJzwvdGQ+Jyk7XHJcbiAgICAgICAgICAgIGZvcih2YXIgYyA9IDA7IGMgPCA0ODsgKytjKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pdEVsZW0gPSAkKCc8dGQ+PGRpdiBjbGFzcz1cInNjaGVkdWxlVW5pdFwiPjwvZGl2PjwvdGQ+JykuYXBwZW5kVG8ocm93RWxlbSkuZmluZChcIi5zY2hlZHVsZVVuaXRcIik7XHJcbiAgICAgICAgICAgICAgICBkYXkucHVzaCh1bml0RWxlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51bml0RWxlbXMucHVzaChkYXkpO1xyXG4gICAgICAgICAgICBzY2hlZHVsZVBpY2tlci5hcHBlbmQocm93RWxlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNjaGVkdWxlUGlja2VyLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2NoZWR1bGVQaWNrZXIub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzY2hlZHVsZVBpY2tlci5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRpYWxvZy5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBwcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBjaGFuZ2VDb2xvciA9IChlbGVtOiBKUXVlcnkpID0+e1xyXG4gICAgICAgICAgICBpZiAocHJlc3NlZCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFR5cGU6IFwib1wiIHwgXCJjXCIgfCBcInBcIiA9IGVsZW0uZGF0YShcInNjaGVkdWxlVHlwZVwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoXCJzY2hlZHVsZVVuaXQtXCIgKyBjdXJyZW50VHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG5leHRUeXBlID0gU2NoZWR1bGUuc2VxdWVuY2VbY3VycmVudFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5kYXRhKFwic2NoZWR1bGVUeXBlXCIsIG5leHRUeXBlKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uYWRkQ2xhc3MoXCJzY2hlZHVsZVVuaXQtXCIgKyBuZXh0VHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNjaGVkdWxlUGlja2VyLm9uKFwibW91c2VvdmVyXCIsIFwiLnNjaGVkdWxlVW5pdFwiLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjaGFuZ2VDb2xvcigkKHRoaXMpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjaGVkdWxlUGlja2VyLm9uKFwibW91c2Vkb3duXCIsIFwiLnNjaGVkdWxlVW5pdFwiLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBwcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2hhbmdlQ29sb3IoJCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVmcmVzaCgpIHtcclxuICAgICAgICBsZXQgYXEgPSBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZVF1ZXVlKCk7XHJcbiAgICAgICAgaWYgKGFxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgIHVybDogXCJhcGkvc2NoZWR1bGUvXCIgKyBhcS5xdWV1ZUlkLFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2NoZWR1bGUgPSBkYXRhOyAvLyBhcnJheSBvZiA3IHN0cmluZ3NcclxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIHIgPSAwOyByIDwgNzsgKytyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgYyA9IDA7IGMgPCA0ODsgKytjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMudW5pdEVsZW1zW3JdW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygpOyAvLyByZW1vdmVzIGFsbCBjbGFzc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmFkZENsYXNzKFwic2NoZWR1bGVVbml0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hZGRDbGFzcyhcInNjaGVkdWxlVW5pdC1cIiArIHNjaGVkdWxlW3JdLmNoYXJBdChjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRhdGEoXCJzY2hlZHVsZVR5cGVcIiwgc2NoZWR1bGVbcl0uY2hhckF0KGMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogb29wc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKCFRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZVF1ZXVlKCkpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIC8vIGxvbCBjYW4ndCBtYWtlIHVwIG15IG1pbmQgd2hldGhlciBJIGxpa2UgZnVuY3Rpb25hbCB2cy4gaXRlcmF0aXZlXHJcbiAgICAgICAgdmFyIHNjaGVkdWxlID0gW107XHJcbiAgICAgICAgZm9yKHZhciByID0gMDsgciA8IDc7ICsrcikge1xyXG4gICAgICAgICAgICBzY2hlZHVsZS5wdXNoKHRoaXMudW5pdEVsZW1zW3JdLm1hcChmdW5jdGlvbih1bml0RWxlbSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5pdEVsZW0uZGF0YShcInNjaGVkdWxlVHlwZVwiKTtcclxuICAgICAgICAgICAgfSkuam9pbihcIlwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXEgPSBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZVF1ZXVlKCk7XHJcbiAgICAgICAgaWYgKGFxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiYXBpL3VwZGF0ZVNjaGVkdWxlXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR0b2tlbjogVXNlci5pZFRva2VuKCksXHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVJZDogYXEucXVldWVJZCxcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZTogc2NoZWR1bGVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNjaGVkdWxlIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IG9vcHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWFuYWdlUXVldWVEaWFsb2cge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX25hbWU6IFwiTWFuYWdlUXVldWVEaWFsb2dcIjtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBQT0xJQ0lFU19VUF9UT19EQVRFID0gJzxzcGFuPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktc2F2ZWRcIj48L3NwYW4+IFNhdmVkPC9zcGFuPic7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBQT0xJQ0lFU19VTlNBVkVEID0gJzxzcGFuPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktb3BlblwiPjwvc3Bhbj4gVXBkYXRlIENvbmZpZ3VyYXRpb248L3NwYW4+JztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgX2FjdCEgOiBNZXNzYWdlUmVzcG9uc2VzO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlQ29uZmlndXJhdGlvbkJ1dHRvbiA6IEpRdWVyeTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBsZXQgZGlhbG9nID0gJChcIiNtYW5hZ2VRdWV1ZURpYWxvZ1wiKTtcclxuXHJcbiAgICAgICAgbGV0IGdyb3Vwc0Zvcm0gPSAkKFwiI2dyb3Vwc0Zvcm1cIik7XHJcbiAgICAgICAgZ3JvdXBzRm9ybS5zdWJtaXQoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKDxIVE1MRm9ybUVsZW1lbnQ+Z3JvdXBzRm9ybVswXSk7XHJcbiAgICAgICAgICAgIGxldCBhcSA9IFF1ZXVlQXBwbGljYXRpb24uaW5zdGFuY2UuYWN0aXZlUXVldWUoKTtcclxuICAgICAgICAgICAgYXEgJiYgYXEudXBkYXRlR3JvdXBzKGZvcm1EYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgcG9saWNpZXNGb3JtID0gJChcIiNwb2xpY2llc0Zvcm1cIik7XHJcbiAgICAgICAgcG9saWNpZXNGb3JtLnN1Ym1pdCgoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbmZpZ3VyYXRpb25CdXR0b24gPSAkKFwiI3VwZGF0ZUNvbmZpZ3VyYXRpb25CdXR0b25cIik7XHJcblxyXG4gICAgICAgICQoXCIjcHJldmVudFVucmVnaXN0ZXJlZENoZWNrYm94XCIpLmNoYW5nZSh0aGlzLnVuc2F2ZWRDaGFuZ2VzLmJpbmQodGhpcykpO1xyXG4gICAgICAgICQoXCIjcHJldmVudEdyb3Vwc0NoZWNrYm94XCIpLmNoYW5nZSh0aGlzLnVuc2F2ZWRDaGFuZ2VzLmJpbmQodGhpcykpO1xyXG4gICAgICAgICQoXCIjcHJpb3JpdGl6ZU5ld0NoZWNrYm94XCIpLmNoYW5nZSh0aGlzLnVuc2F2ZWRDaGFuZ2VzLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLm9ic2VydmFibGUuYWRkTGlzdGVuZXIodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lc3NhZ2VSZXNwb25zZShcImFjdGl2ZVF1ZXVlU2V0XCIpXHJcbiAgICBwdWJsaWMgcmVmcmVzaCgpIHtcclxuICAgICAgICBsZXQgYXEgPSBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZVF1ZXVlKCk7XHJcbiAgICAgICAgaWYgKCFhcSkgeyByZXR1cm47fVxyXG4gICAgICAgIGlmICghYXEuaXNBZG1pbikgeyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgJChcIiNjaGVja1F1ZXVlUm9zdGVyTGlua1wiKS5hdHRyKFwiaHJlZlwiLCBcImFwaS9yb3N0ZXIvXCIgKyBhcS5xdWV1ZUlkKTtcclxuICAgICAgICAkKFwiI2NoZWNrUXVldWVHcm91cHNMaW5rXCIpLmF0dHIoXCJocmVmXCIsIFwiYXBpL2dyb3Vwcy9cIiArIGFxLnF1ZXVlSWQpO1xyXG5cclxuICAgICAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcclxuICAgICAgICAgICAgdXJsOiBcImFwaS9xdWV1ZUNvbmZpZ3VyYXRpb24vXCIgKyBhcS5xdWV1ZUlkLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRoaXMucmVmcmVzaFJlc3BvbnNlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIGVycm9yOiBvb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWZyZXNoUmVzcG9uc2UoZGF0YSA6IHtbaW5kZXg6c3RyaW5nXTogc3RyaW5nfSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgICAgICAkKFwiI3ByZXZlbnRVbnJlZ2lzdGVyZWRDaGVja2JveFwiKS5wcm9wKFwiY2hlY2tlZFwiLCBkYXRhW1wicHJldmVudFVucmVnaXN0ZXJlZFwiXSA9PT0gXCJ5XCIpO1xyXG4gICAgICAgICQoXCIjcHJldmVudEdyb3Vwc0NoZWNrYm94XCIpLnByb3AoXCJjaGVja2VkXCIsIGRhdGFbXCJwcmV2ZW50R3JvdXBzXCJdID09PSBcInlcIik7XHJcbiAgICAgICAgJChcIiNwcmlvcml0aXplTmV3Q2hlY2tib3hcIikucHJvcChcImNoZWNrZWRcIiwgZGF0YVtcInByaW9yaXRpemVOZXdcIl0gPT09IFwieVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VzVXBUb0RhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkge1xyXG4gICAgICAgIGxldCBhcSA9IFF1ZXVlQXBwbGljYXRpb24uaW5zdGFuY2UuYWN0aXZlUXVldWUoKTtcclxuICAgICAgICBpZiAoIWFxKSB7IHJldHVybjt9XHJcbiAgICAgICAgYXEudXBkYXRlQ29uZmlndXJhdGlvbih7XHJcbiAgICAgICAgICAgIHByZXZlbnRVbnJlZ2lzdGVyZWQgOiAkKFwiI3ByZXZlbnRVbnJlZ2lzdGVyZWRDaGVja2JveFwiKS5pcyhcIjpjaGVja2VkXCIpID8gXCJ5XCIgOiBcIm5cIixcclxuICAgICAgICAgICAgcHJldmVudEdyb3VwcyA6ICQoXCIjcHJldmVudEdyb3Vwc0NoZWNrYm94XCIpLmlzKFwiOmNoZWNrZWRcIikgPyBcInlcIiA6IFwiblwiLFxyXG4gICAgICAgICAgICBwcmlvcml0aXplTmV3IDogJChcIiNwcmlvcml0aXplTmV3Q2hlY2tib3hcIikuaXMoXCI6Y2hlY2tlZFwiKSA/IFwieVwiIDogXCJuXCJcclxuICAgICAgICB9KS5kb25lKHRoaXMuY2hhbmdlc1VwVG9EYXRlLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdW5zYXZlZENoYW5nZXMoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb25maWd1cmF0aW9uQnV0dG9uLmh0bWwoTWFuYWdlUXVldWVEaWFsb2cuUE9MSUNJRVNfVU5TQVZFRClcclxuICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSlcclxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiYnRuLXN1Y2Nlc3NcIilcclxuICAgICAgICAgICAgLmFkZENsYXNzKFwiYnRuLXdhcm5pbmdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VzVXBUb0RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb25maWd1cmF0aW9uQnV0dG9uLmh0bWwoTWFuYWdlUXVldWVEaWFsb2cuUE9MSUNJRVNfVVBfVE9fREFURSlcclxuICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJidG4td2FybmluZ1wiKVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJidG4tc3VjY2Vzc1wiKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBVc2VyIHtcclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gc2lnbkluKGVtYWlsOiBzdHJpbmcsIGlkdG9rZW46IHN0cmluZykge1xyXG4gICAgICAgIGxldCBuZXdVc2VyID0gbmV3IEF1dGhlbnRpY2F0ZWRVc2VyKGVtYWlsLCBpZHRva2VuKTtcclxuXHJcbiAgICAgICAgdmFyIGFjY291bnRNZXNzYWdlRWxlbSA9ICQoXCIjYWNjb3VudE1lc3NhZ2VcIik7XHJcbiAgICAgICAgLy8gSWYgdGhleSdyZSBub3QgdW1pY2gsIHRoZXkgY2FuJ3Qgc2lnbiB1cCFcclxuICAgICAgICBpZiAoIW5ld1VzZXIuaXNVbWljaCgpKXtcclxuICAgICAgICAgICAgYWNjb3VudE1lc3NhZ2VFbGVtLnNob3coKTtcclxuICAgICAgICAgICAgYWNjb3VudE1lc3NhZ2VFbGVtLmh0bWwoXCJIaSBcIiArIG5ld1VzZXIuZW1haWwgKyBcIiEgUGxlYXNlIDxhPnNpZ24gb3V0PC9hPiBhbmQgc3dpdGNoIHRvIGFuIEB1bWljaC5lZHUgYWNjb3VudCB0byB1c2UgdGhlIHF1ZXVlLlwiKTtcclxuICAgICAgICAgICAgYWNjb3VudE1lc3NhZ2VFbGVtLmZpbmQoXCJhXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXV0aDIgPSBnYXBpLmF1dGgyLmdldEF1dGhJbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgYXV0aDIuZGlzY29ubmVjdCgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFVzZXIuc2lnbk91dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRNZXNzYWdlRWxlbS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiLm9wZW5TaWduVXBEaWFsb2dCdXR0b25cIikucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gc2lnbk91dCgpIHtcclxuICAgICAgICB2YXIgYWNjb3VudE1lc3NhZ2VFbGVtID0gJChcIiNhY2NvdW50TWVzc2FnZVwiKTtcclxuICAgICAgICBhY2NvdW50TWVzc2FnZUVsZW0uaGlkZSgpO1xyXG5cclxuICAgICAgICB0aGVVc2VyICYmIHRoZVVzZXIub25TaWduT3V0KCk7XHJcblxyXG4gICAgICAgIG5ldyBVbmF1dGhlbnRpY2F0ZWRVc2VyKCk7IC8vIHdpbGwgaW1wbGljaXRseSBzZXQgdGhlVXNlciBzaW5nbGV0b24gaW5zdGFuY2VcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaWRUb2tlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhlVXNlci5pZFRva2VuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzVW1pY2goKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZVVzZXIuaXNVbWljaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0NvdXJzZUFkbWluKGNvdXJzZUlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhlVXNlci5pc0NvdXJzZUFkbWluKGNvdXJzZUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNNZShlbWFpbDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZVVzZXIuaXNNZShlbWFpbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgY2xhc3MgVXNlckJhc2Uge1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9uYW1lID0gXCJVc2VyQmFzZVwiO1xyXG4gICAgXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGlzVW1pY2goKSA6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGlkVG9rZW4oKSA6IHN0cmluZztcclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgaXNDb3Vyc2VBZG1pbihjb3Vyc2VJZDogc3RyaW5nKSA6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGlzTWUoZW1haWw6IHN0cmluZykgOiBib29sZWFuO1xyXG4gICAgXHJcbiAgICAgICAgcHVibGljIG9uU2lnbk91dCgpIHtcclxuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkbyBoZXJlIGZvciBub3dcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvbkZpbmlzaFNpZ25pbmdJbigpIHtcclxuICAgICAgICAgICAgdGhlVXNlciA9IHRoaXM7XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gTm90aWZ5IHRoZSBhcHBsaWNhdGlvbiB0aGVyZSdzIGEgbmV3IHVzZXIgaW4gdG93blxyXG4gICAgICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlICYmIFF1ZXVlQXBwbGljYXRpb24uaW5zdGFuY2UudXNlclNpZ25lZEluKCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgQXV0aGVudGljYXRlZFVzZXIgZXh0ZW5kcyBVc2VyQmFzZSB7XHJcblxyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBlbWFpbDogc3RyaW5nO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2lkVG9rZW46IHN0cmluZztcclxuICAgICAgICBwcml2YXRlIGFkbWluczoge1tpbmRleDogc3RyaW5nXTogYm9vbGVhbn0gPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoZW1haWw6IHN0cmluZywgaWR0b2tlbjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1haWwgPSBlbWFpbDtcclxuICAgICAgICAgICAgdGhpcy5faWRUb2tlbiA9IGlkdG9rZW47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiYXBpL2xvZ2luXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR0b2tlbjogdGhpcy5pZFRva2VuKClcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQWRtaW4oKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogb29wc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHB1YmxpYyBpc1VtaWNoKCkgOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVuZHNXaXRoKHRoaXMuZW1haWwsIFwiQHVtaWNoLmVkdVwiKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgaXNNZShlbWFpbDogc3RyaW5nKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWFpbCA9PT0gZW1haWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcHVibGljIGlkVG9rZW4oKSA6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZFRva2VuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHByaXZhdGUgY2hlY2tBZG1pbigpIDogdm9pZCB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgIHVybDogXCJhcGkvYWRtaW5Db3Vyc2VzXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR0b2tlbjogdGhpcy5pZFRva2VuKClcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkbWluc1tkYXRhW2ldW1wiY291cnNlSWRcIl1dID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gSEFDSyBJZiBhZG1pbiBmb3IgYW55dGhpbmcsIGdpdmUgdGhlbSBmYXN0IHJlZnJlc2hcclxuICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGQgb25seSBiZSBvbiB0aGUgcXVldWVzIHRoZXkgYWRtaW5pc3RlclxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsc28gaWYgYWRtaW4gcHJvbXB0IGZvciBub3RpZmljYXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLnJlZnJlc2hBY3RpdmVRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOb3RpZmljYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLnJlZnJlc2hBY3RpdmVRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRmluaXNoU2lnbmluZ0luKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IG9vcHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcHVibGljIGlzQ291cnNlQWRtaW4oY291cnNlSWQ6IHN0cmluZykgOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRtaW5zW2NvdXJzZUlkXTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBVbmF1dGhlbnRpY2F0ZWRVc2VyIGV4dGVuZHMgVXNlckJhc2Uge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMub25GaW5pc2hTaWduaW5nSW4oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIFF1ZXVlQXBwbGljYXRpb24uaW5zdGFuY2UucmVmcmVzaEFjdGl2ZVF1ZXVlKCk7XHJcbiAgICAgICAgICAgIH0sIDYwMDAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE86IGNsZWFuIHVwIHdoZXJlIHRoZSByZWZyZXNoIGludGVydmFscyBnZXQgc2V0XHJcbiAgICAgICAgICAgIC8vICAgICAgIHJpZ2h0IG5vdyBpdCBzZWVtcyBsaWtlIG11bHRpcGxlIGNhbiBnZXQgc2V0XHJcbiAgICBcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgaXNVbWljaCgpIDogYm9vbGVhbiB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgICAgIHB1YmxpYyBpZFRva2VuKCkgOiBzdHJpbmcgeyByZXR1cm4gXCJcIjsgfVxyXG4gICAgICAgIHB1YmxpYyBpc0NvdXJzZUFkbWluKGNvdXJzZUlkOiBzdHJpbmcpIDogYm9vbGVhbiB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgICAgIHB1YmxpYyBpc01lKGVtYWlsOiBzdHJpbmcpIDogYm9vbGVhbiB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGhlVXNlcjogVXNlckJhc2UgPSBuZXcgVW5hdXRoZW50aWNhdGVkVXNlcigpO1xyXG5cclxufSAvLyBlbmQgVXNlciBuYW1lc3BhY2VcclxuXHJcblxyXG4vLyBHaXZlIHdhcm5pbmcgdG8gdXNlcnMgaW4gU2FmYXJpL2lPUyBwcml2YXRlIGJyb3dzaW5nXHJcbi8vIG1vZGUgdGhhdCBHb29nbGUgc2lnbi1pbiB3b24ndCB3b3JrLlxyXG4vLyBUT0RPOiBJJ20gbm90IGNvbnZpbmNlZCB0aGlzIGFjdHVhbGx5IGRvZXMgYW55dGhpbmdcclxuLy9odHRwczovL2dpc3QuZ2l0aHViLmNvbS9waGlsZnJlby82OGVhM2NkOTgwZDcyMzgzYzk1MVxyXG5pZiAodHlwZW9mIHNlc3Npb25TdG9yYWdlID09PSAnb2JqZWN0Jykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdsb2NhbFN0b3JhZ2UnLCBcIjFcIik7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnbG9jYWxTdG9yYWdlJyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgb29wcyhudWxsLCBcIkl0IGxvb2tzIGxpa2UgbG9jYWwgc3RvcmFnZSBpcyBkaXNhYmxlZCBpbiB5b3VyIGJyb3dzZXIuIFRoaXMgbWF5IGFnZ3JhdmF0ZSBhbiBpc3N1ZSB3aXRoIEdvb2dsZSBzaWduLWluIG9uIFNhZmFyaSBvciBpT1Mgd2hpbGUgdXNpbmcgcHJpdmF0ZSBicm93c2luZyBtb2RlLlwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb29wcyh4aHI6IGFueSwgdGV4dFN0YXR1czogYW55KXtcclxuICAgIGlmICh0ZXh0U3RhdHVzID09PSBcImFib3J0XCIpIHsgcmV0dXJuOyB9XHJcbiAgICBjb25zb2xlLmxvZyhcIk9vcHMuIEFuIGVycm9yIG9jY3VycmVkLiBUcnkgcmVmcmVzaGluZyB0aGUgcGFnZS5cIik7XHJcbiAgICAkKFwiI29vcHNEaWFsb2dcIikubW9kYWwoXCJzaG93XCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93RXJyb3JNZXNzYWdlKG1lc3NhZ2U6IGFueSkge1xyXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAkKFwiI2Vycm9yTWVzc2FnZVwiKS5odG1sKG1lc3NhZ2UpO1xyXG4gICAgJChcIiNlcnJvckRpYWxvZ1wiKS5tb2RhbChcInNob3dcIik7XHJcbn1cclxuIiwiaW1wb3J0IHtRdWV1ZUFwcGxpY2F0aW9uLCBTY2hlZHVsZSwgTWFuYWdlUXVldWVEaWFsb2csIFVzZXJ9IGZyb20gXCIuL3F1ZXVlXCI7XHJcblxyXG4vLyBpbXBvcnQge2dhcGl9IGZyb20gXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9wbGF0Zm9ybS5qc1wiO1xyXG5cclxuZnVuY3Rpb24gb25TaWduSW4oZ29vZ2xlVXNlcjogZ2FwaS5hdXRoMi5Hb29nbGVVc2VyKSB7XHJcbiAgICB2YXIgcHJvZmlsZSA9IGdvb2dsZVVzZXIuZ2V0QmFzaWNQcm9maWxlKCk7XHJcbi8vICAgICAgICBjb25zb2xlLmxvZygnTmFtZTogJyArIHByb2ZpbGUuZ2V0TmFtZSgpKTtcclxuLy8gICAgICAgIGNvbnNvbGUubG9nKCdJbWFnZSBVUkw6ICcgKyBwcm9maWxlLmdldEltYWdlVXJsKCkpO1xyXG4vLyAgICAgICAgY29uc29sZS5sb2coJ0lEOiAnICsgcHJvZmlsZS5nZXRJZCgpKTsgLy8gRG8gbm90IHNlbmQgdG8geW91ciBiYWNrZW5kISBVc2UgYW4gSUQgdG9rZW4gaW5zdGVhZC5cclxuICAgIFVzZXIuc2lnbkluKHByb2ZpbGUuZ2V0RW1haWwoKSwgZ29vZ2xlVXNlci5nZXRBdXRoUmVzcG9uc2UoKS5pZF90b2tlbik7XHJcbi8vICAgICAgICBjb25zb2xlLmxvZyhnb29nbGVVc2VyLmdldEF1dGhSZXNwb25zZSgpLmV4cGlyZXNfYXQoKSk7XHJcbi8vICAgICAgICB2YXIgZXhwaXJlc19hdCA9IGdvb2dsZVVzZXIuZ2V0QXV0aFJlc3BvbnNlKCkuZXhwaXJlc19hdDtcclxuLy8gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4vLyAgICAgICAgdmFyIG5vdzIgPSBEYXRlLm5vdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cERpYWxvZ3MoKSB7XHJcbiAgICB2YXIgY2xlYXJJbnB1dCA9ICQoXCIjY2xlYXJJbnB1dFwiKTtcclxuICAgIHZhciBjbGVhclRoZVF1ZXVlRGlhbG9nID0gJChcIiNjbGVhclRoZVF1ZXVlRGlhbG9nXCIpO1xyXG4gICAgY2xlYXJUaGVRdWV1ZURpYWxvZy5vbignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2xlYXJJbnB1dC5mb2N1cygpO1xyXG4gICAgfSk7XHJcbiAgICBjbGVhclRoZVF1ZXVlRGlhbG9nLm9uKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFySW5wdXQudmFsKFwiXCIpO1xyXG4gICAgfSk7XHJcbiAgICBjbGVhcklucHV0Lm9uKFwiaW5wdXRcIiwgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgaWYgKCQodGhpcykudmFsKCkgPT0gXCJjbGVhclwiKXtcclxuICAgICAgICAgICAgY2xlYXJUaGVRdWV1ZURpYWxvZy5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIGxldCBhcSA9IFF1ZXVlQXBwbGljYXRpb24uaW5zdGFuY2UuYWN0aXZlUXVldWUoKTtcclxuICAgICAgICAgICAgYXEgJiYgYXEuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgc2lnblVwRGlhbG9nID0gJChcIiNzaWduVXBEaWFsb2dcIik7XHJcbiAgICBzaWduVXBEaWFsb2cub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5maW5kKFwiaW5wdXRcIikudmFsKFwiXCIpO1xyXG4gICAgfSk7XHJcbiAgICBzaWduVXBEaWFsb2cub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykuZmluZChcImlucHV0OmZpcnN0XCIpLmZvY3VzKCk7XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcbiAgICBsZXQgc2VuZE1lc3NhZ2VEaWFsb2cgPSAkKFwiI3NlbmRNZXNzYWdlRGlhbG9nXCIpO1xyXG4gICAgc2VuZE1lc3NhZ2VEaWFsb2cub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5maW5kKFwiaW5wdXRcIikudmFsKFwiXCIpO1xyXG4gICAgfSk7XHJcbiAgICBzZW5kTWVzc2FnZURpYWxvZy5vbignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5maW5kKFwiaW5wdXQ6Zmlyc3RcIikuZm9jdXMoKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBsZXQgc2VuZE1lc3NhZ2VGb3JtID0gJChcIiNzZW5kTWVzc2FnZUZvcm1cIik7XHJcbiAgICBzZW5kTWVzc2FnZUZvcm0uc3VibWl0KGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgY29udGVudCA6IHN0cmluZyA9IDxzdHJpbmc+JChcIiNzZW5kTWVzc2FnZUNvbnRlbnRcIikudmFsKCk7XHJcblxyXG4gICAgICAgIGlmICghY29udGVudCB8fCBjb250ZW50Lmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgYWxlcnQoXCJZb3UgY2FuJ3Qgc2VuZCBhIGJsYW5rIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBRdWV1ZUFwcGxpY2F0aW9uLmluc3RhbmNlLnNlbmRNZXNzYWdlKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBzZW5kTWVzc2FnZURpYWxvZy5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIG5ldyBTY2hlZHVsZSgkKFwiI3NjaGVkdWxlUGlja2VyXCIpKTtcclxuXHJcbiAgICBuZXcgTWFuYWdlUXVldWVEaWFsb2coKTtcclxufVxyXG5cclxuXHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgUXVldWVBcHBsaWNhdGlvbi5jcmVhdGVJbnN0YW5jZSgkKFwiI3F1ZXVlQXBwbGljYXRpb25cIikpO1xyXG4gICAgLy8gVXNlci5zZXRUYXJnZXQoVW5hdXRoZW50aWNhdGVkVXNlci5pbnN0YW5jZSgpKTtcclxuXHJcbiAgICBzZXR1cERpYWxvZ3MoKTtcclxuXHJcbiAgICAvLyA8ZGl2IGNsYXNzPVwiZy1zaWduaW4yXCIgZGF0YS1vbnN1Y2Nlc3M9XCJvblNpZ25JblwiPjwvZGl2PlxyXG4gICAgLy8gUmVjdXJyaW5nIHJlZnJlc2hcclxuICAgIC8vc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuICAgIC8vICAgIFF1ZXVlQXBwbGljYXRpb24ucmVmcmVzaEFjdGl2ZVF1ZXVlKCk7XHJcbiAgICAvL30sIDYwMDAwKTtcclxuICAgIC8vIE1PVkVEIFRPIFVTRVIgQ09ERSBJTiBxdWV1ZS5qc1xyXG5cclxuICAgIGdhcGkuc2lnbmluMi5yZW5kZXIoJ2dvb2dsZVNpZ25JbkJ1dHRvbicsIHtcclxuICAgICAgICAnc2NvcGUnOiAncHJvZmlsZSBlbWFpbCcsXHJcbiAgICAgICAgJ3dpZHRoJzogMjQwLFxyXG4gICAgICAgICdoZWlnaHQnOiA1MCxcclxuICAgICAgICAnbG9uZ3RpdGxlJzogdHJ1ZSxcclxuICAgICAgICAndGhlbWUnOiAnZGFyaycsXHJcbiAgICAgICAgJ29uc3VjY2Vzcyc6IG9uU2lnbkluLFxyXG4gICAgICB9KTtcclxufSk7XHJcblxyXG5jb25zb2xlLmxvZyhcIlRFU1QgQkxBSFwiKTsiXSwic291cmNlUm9vdCI6IiJ9